{"mappings":"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","sources":["<anon>","SGAEA/Tarea_4_5_Plus/main.js","SGAEA/Tarea_4_5_Plus/direccion.js","SGAEA/Tarea_4_5_Plus/estudiante.js","SGAEA/Tarea_4_5_Plus/asignatura.js","SGAEA/Tarea_4_5_Plus/listaEstudiantes.js","SGAEA/Tarea_4_5_Plus/lista.js","SGAEA/Tarea_4_5_Plus/listaAsignaturas.js"],"sourcesContent":["/**\r\n * @file main.js\r\n * @author Alonso Hernández Robles\r\n * @fileoverview Programa Principal de SGAEA. _(Tarea 4.5)_\r\n */ /** \r\n ╭--------------------------------------------------------------------------------------------------------------------------------------╮\r\n | SGAEA - Sistema de Gestión Académica de Estudiantes y Asignaturas                                                                    |\r\n | Alonso Hernández Robles 2º DAW AULA                                                                                                  |\r\n |                                                                                                                                      |\r\n | Github Pages: https://aloncraftmc.github.io/DWEC_VIEW_HernandezRobles_Alonso/SGAEA/Original%20(1%C2%AA%20Evaluaci%C3%B3n)/index.html |\r\n | (Es necesario abrir la consola de las DevTools antes de cargar la página)                                                            |\r\n ╰--------------------------------------------------------------------------------------------------------------------------------------╯\r\n */ /**\r\n * 1. Redefinición de console.log() y console.groupCollapsed()\r\n * \r\n * En esta sección se redefinen los métodos console.log() y console.groupCollapsed() para aplicar estilos a los textos en función de su finalidad.\r\n * \r\n * console.log() hace uso de estilos asemejados a botones, títulos y subtítulos.\r\n * console.groupCollapsed() hace uso de estilos asemejados a botones y subtítulos.\r\n * Este método muestra los elementos console.log() que tenga anidados dentro, similar a un <details>.\r\n * \r\n * Por defecto, los métodos mostrarán un texto con la fuente 'Rubik', importada desde la etiqueta <style> de index.html.\r\n */ /**\r\n * @global\r\n * @constant\r\n * @type {Function}\r\n * @description **Función original** de `console.log()`.\r\n */ /**\r\n * @file direccion.js\r\n * @author Alonso Hernández Robles\r\n */ /**\r\n * 2.1. Clase Direccion\r\n * \r\n * La clase Direccion tiene los atributos calle, numero, piso, codigoPostal, provincia y localidad, todos son\r\n * tipo String y tienen getter. En el constructor se valida el código postal (5 números). Si no es válido, se\r\n * establecerá como \"00000\". Contiene un toString() que muestra todas las propiedades.\r\n */ /**\r\n * @class\r\n * @classdesc Representa una **dirección** de un estudiante.\r\n */ class $82d6b8e4673e1777$export$5f64543799e2ffa6 {\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Calle** de la dirección. Tiene getter.\r\n     */ #calle;\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Número** de la dirección. Tiene getter.\r\n     */ #numero;\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Piso** de la dirección. Tiene getter.\r\n     */ #piso;\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Código postal** de la dirección. Tiene getter.\r\n     */ #codigoPostal;\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Provincia** de la dirección. Tiene getter.\r\n     */ #provincia;\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Localidad** de la dirección. Tiene getter.\r\n     */ #localidad;\n    /**\r\n     * @constructor\r\n     * @param {String} calle Calle de la dirección\r\n     * @param {String} numero Número de la dirección\r\n     * @param {String} piso Piso de la dirección\r\n     * @param {String} codigoPostal Código postal de la dirección\r\n     * @param {String} provincia Provincia de la dirección\r\n     * @param {String} localidad Localidad de la dirección\r\n     * @description Crea una **dirección** con los datos proporcionados.\r\n     * - Se valida el código postal (5 números).\r\n     * - Si no es válido, se establecerá como `\"00000\"`.\r\n     * @see #calle\r\n     * @see #numero\r\n     * @see #piso\r\n     * @see #codigoPostal\r\n     * @see #provincia\r\n     * @see #localidad\r\n     */ constructor(calle, numero, piso, codigoPostal, provincia, localidad){\n        this.#calle = calle;\n        this.#numero = numero;\n        this.#piso = piso;\n        this.#codigoPostal = new String(codigoPostal).match(/^[0-9]{5}$/) ? codigoPostal : \"00000\";\n        this.#provincia = provincia;\n        this.#localidad = localidad;\n    }\n    /**\r\n     * @type {String}\r\n     * @description Getter de la calle de la dirección.\r\n     * @see #calle\r\n     */ get calle() {\n        return this.#calle;\n    }\n    /**\r\n     * @type {String}\r\n     * @description Getter del número de la dirección.\r\n     * @see #numero\r\n     */ get numero() {\n        return this.#numero;\n    }\n    /**\r\n     * @type {String}\r\n     * @description Getter del piso de la dirección.\r\n     * @see #piso\r\n     */ get piso() {\n        return this.#piso;\n    }\n    /**\r\n     * @type {String}\r\n     * @description Getter del código postal de la dirección.\r\n     * @see #codigoPostal\r\n     */ get codigoPostal() {\n        return this.#codigoPostal;\n    }\n    /**\r\n     * @type {String}\r\n     * @description Getter de la provincia de la dirección.\r\n     * @see #provincia\r\n     */ get provincia() {\n        return this.#provincia;\n    }\n    /**\r\n     * @type {String}\r\n     * @description Getter de la localidad de la dirección.\r\n     * @see #localidad\r\n     */ get localidad() {\n        return this.#localidad;\n    }\n    /**\r\n     * @function\r\n     * @override\r\n     * @returns {String} Dirección completa.\r\n     * @description Devuelve la dirección completa.\r\n     * @example \"C/ Rara 12, 3ºA - 18015 Granada (Granada)\"\r\n     */ toString() {\n        return this.#calle + \" \" + this.#numero + \", \" + this.#piso + \" - \" + this.#codigoPostal + \" \" + this.#localidad + \" (\" + this.#provincia + \")\";\n    }\n}\n\n\n/**\r\n * @file estudiante.js\r\n * @author Alonso Hernández Robles\r\n */ \n/**\r\n * @file asignatura.js\r\n * @author Alonso Hernández Robles\r\n */ /**\r\n * 2.3. Clase Asignatura\r\n * \r\n * Atributos:\r\n * \r\n * - nombre: String del nombre de la asignatura. Sólo puede contener letras y espacios. De lo contrario, se\r\n *      inicializará como \"Asignatura\". Tiene getter.\r\n * \r\n * - calificaciones: Array de números de las calificaciones de todos los estudiantes en la asignatura. No tiene getter.\r\n * \r\n * Métodos:\r\n * \r\n * + constructor(nombre): Si el nombre contiene caracteres que no sean letras o espacios, se\r\n *      establece como \"Asignatura\". De lo contrario, se establece como tal. Se inicializa vacío el Array\r\n *      calificaciones.\r\n * \r\n * + get promedio(): Number del promedio de los números del Array calificaciones. Devuelve el String\r\n *      \"Sin evaluar\" si dicho array está vacío.\r\n * \r\n * + toString(): Devuelve el nombre de la asignatura (Ya que el objeto Asignatura no contiene más\r\n *      atributos sobre la información de la instancia, el método es idéntico a get nombre(), pero se declarará\r\n *      y usará con propósitos semánticos);\r\n * \r\n * + añadirCalificacion(calificacion): Añade calificacion al Array calificaciones.\r\n * \r\n * + eliminarCalificacion(calificacion): Elimina una ocurrencia cualquiera de calificacion en el Array calificaciones.\r\n */ /**\r\n * @class\r\n * @classdesc Representa una **asignatura**.\r\n */ class $5d2658e116f5834d$export$e35364a509610a06 {\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Nombre** de la asignatura. Tiene getter.\r\n     * - Sólo puede contener letras y espacios. De lo contrario, se inicializará como `\"Asignatura\"`.\r\n     */ #nombre;\n    /**\r\n     * @type {Number[]}\r\n     * @private\r\n     * @description **Calificaciones** de los estudiantes en la asignatura. No tiene getter.\r\n     */ #calificaciones;\n    /**\r\n     * @constructor\r\n     * @param {String} nombre Nombre de la asignatura\r\n     * @description Crea una **asignatura** con los datos proporcionados.\r\n     * - Si el nombre contiene caracteres que no sean letras o espacios, se establece como `\"Asignatura\"`. De lo contrario, se establece como tal.\r\n     * - Se inicializa vacío el Array `#calificaciones`.\r\n     * @see #nombre\r\n     * @see #calificaciones\r\n     */ constructor(nombre){\n        this.#nombre = nombre.match(/^[a-zA-ZáéíóúüÁÉÍÓÚÜ ]+$/) ? nombre : \"Asignatura\";\n        this.#calificaciones = [];\n    }\n    /**\r\n     * @type {String}\r\n     * @description Getter del nombre de la asignatura.\r\n     * @see #nombre\r\n     */ get nombre() {\n        return this.#nombre;\n    }\n    /**\r\n     * @type {Number}\r\n     * @description **Promedio** de las calificaciones de los estudiantes en la asignatura.\r\n     * - Devuelve `\"Sin evaluar\"` si no hay calificaciones.\r\n     * @see #calificaciones\r\n     */ get promedio() {\n        if (this.#calificaciones.length == 0) return \"Sin evaluar\";\n        const resultado = this.#calificaciones.reduce((suma, calificacion)=>suma += Number.parseFloat(calificacion), 0) / this.#calificaciones.length;\n        return Number(resultado).toFixed(2);\n    }\n    /**\r\n     * @function\r\n     * @override\r\n     * @returns {String} Nombre de la asignatura.\r\n     * @description Devuelve el nombre de la asignatura.\r\n     * > Ya que el objeto Asignatura no contiene más atributos sobre la información de la instancia, el método es idéntico a `get nombre()`, pero se declarará y usará con propósitos semánticos.\r\n     * @example \"DWEC\"\r\n     */ toString() {\n        return this.#nombre;\n    }\n    /**\r\n     * @function\r\n     * @param {Number} calificacion Calificación a añadir\r\n     * @description **Añade** una calificación a la asignatura.\r\n     * > Saber a qué estudiante está correspondida la calificación no es relevante, para ello dicha información ya se encuentra almacenada dentro de la propiedad privada [`#asignaturas`](Estudiante.html#asignaturas) de la clase [`Estudiante`](Estudiante.html).\r\n     * @see #calificaciones\r\n     */ \"a\\xf1adirCalificacion\"(calificacion) {\n        this.#calificaciones.push(calificacion);\n    }\n    /**\r\n     * @function\r\n     * @param {Number} calificacion Calificación a eliminar\r\n     * @throws {Error} Si la calificación no está en el Array #calificaciones.\r\n     * @description **Elimina** una ocurrencia cualquiera de `calificacion` en el Array `#calificaciones`.\r\n     * > Saber a qué estudiante está correspondida la calificación no es relevante, para ello dicha información ya se encuentra almacenada dentro de la propiedad privada [`#asignaturas`](Estudiante.html#asignaturas) de la clase [`Estudiante`](Estudiante.html).\r\n     * @see #calificaciones\r\n     */ eliminarCalificacion(calificacion) {\n        const indiceCalificacion = this.#calificaciones.indexOf(calificacion);\n        if (indiceCalificacion == -1) throw new Error(\"Ning\\xfan estudiante ha sacado dicha calificaci\\xf3n.\");\n        this.#calificaciones.splice(indiceCalificacion, 1);\n    }\n}\n\n\nclass $e17884a1942f03bd$export$b6677c6d6502f2a3 {\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Identificador** único del estudiante. Tiene getter.\r\n     * - Será `\"E\"` seguido del número siguiente posible que no esté ocupado.\r\n     * - Los números ocupados estarán almacenados en el atributo estático `#numerosOcupados`, y será calculado en el constructor.\r\n     */ #id;\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Nombre** del estudiante. Tiene getter.\r\n     * - Sólo puede contener letras y espacios. De lo contrario, se inicializará como `\"Estudiante\"`.\r\n     */ #nombre;\n    /**\r\n     * @type {Number}\r\n     * @private\r\n     * @description **Edad** del estudiante. Tiene getter.\r\n     * - Sólo puede ser positiva. De lo contrario, se inicializará como `0`.\r\n     */ #edad;\n    /**\r\n     * @type {Direccion}\r\n     * @private\r\n     * @description **Dirección** del estudiante. Tiene getter.\r\n     */ #direccion;\n    /**\r\n     * @type {Array[]}\r\n     * @private\r\n     * @description **Asignaturas** de las cuales el estudiante está matriculado y sus correspondientes **calificaciones**.\r\n     * - Cada elemento es un Array con dos posiciones.\r\n     *      - La primera (`[0]`) es la instancia en sí del objeto `Asignatura`.\r\n     *      - La segunda (`[1]`) es la calificación que tiene el estudiante en dicha asignatura.\r\n     * - Su getter devuelve una copia del Array y no la referencia.\r\n     */ #asignaturas;\n    /**\r\n     * @type {String[]}\r\n     * @private\r\n     * @description **Registros** de matriculaciones y desmatriculaciones que se han aplicado al estudiante.\r\n     * - Cada elemento es un Array con tres posiciones.\r\n     *      - La primera (`[0]`) es un String del nombre de la asignatura.\r\n     *      - La segunda (`[1]`) es la fecha y hora en la cual se hizo el trámite.\r\n     *      - La tercera (`[2]`) es un String del tipo de trámite (`\"Matriculación\"` o `\"Desmatriculación\"`).\r\n     * - Su getter devuelve un Array de Strings con la información de cada registro.\r\n     */ #registros;\n    /**\r\n     * @type {Number[]}\r\n     * @private\r\n     * @static\r\n     * @description **Números** de las ids usadas por los estudiantes creados en ese momento. No tiene getter.\r\n     * - Se actualizará dinámicamente en la creación y eliminación de estudiantes.\r\n     */ static #numerosOcupados = [];\n    /**\r\n     * @constructor\r\n     * @param {String} nombre Nombre del estudiante\r\n     * @param {String} edad Edad del estudiante\r\n     * @param {Direccion} direccion Dirección del estudiante\r\n     * @description Crea un **estudiante** con los datos proporcionados.\r\n     * - Calcula el número de la id, empezando por `1` hasta que encuentre un número no ocupado, lo añade al Array estático `#numerosOcupados`, y establece la id como el String `\"E\"` concatenado de dicho número.\r\n     * - Si el nombre es `null` o contiene caracteres que no sean letras o espacios, se establece como `\"Estudiante\"`. De lo contrario, se establece como tal.\r\n     * - Si la edad es un número negativo, se establece como `0`. De lo contrario, se establece como tal.\r\n     * - Se inicializan vacíos los Arrays `#asignaturas` y `#registros`.\r\n     * @see #id\r\n     * @see #nombre\r\n     * @see #edad\r\n     * @see #direccion\r\n     * @see #asignaturas\r\n     * @see #registros\r\n     */ constructor(nombre, edad, direccion){\n        let numeroId = 1;\n        while($e17884a1942f03bd$export$b6677c6d6502f2a3.#numerosOcupados.includes(numeroId))numeroId++;\n        $e17884a1942f03bd$export$b6677c6d6502f2a3.#numerosOcupados.push(numeroId);\n        this.#id = \"E\" + numeroId;\n        this.#nombre = nombre != null ? nombre.match(/^[a-zA-ZáéíóúüÁÉÍÓÚÜ ]+$/) ? nombre : \"Estudiante\" : \"Estudiante\";\n        this.#edad = !Number.isNaN(edad) && Number.isInteger(edad) && edad > 0 ? edad : 0;\n        this.#direccion = direccion;\n        this.#asignaturas = [];\n        this.#registros = [];\n    }\n    /**\r\n     * @type {String}\r\n     * @description Getter del identificador del estudiante.\r\n     * @see #id\r\n     */ get id() {\n        return this.#id;\n    }\n    /**\r\n     * @type {String}\r\n     * @description Getter del nombre del estudiante.\r\n     * @see #nombre\r\n     */ get nombre() {\n        return this.#nombre;\n    }\n    /**\r\n     * @type {Number}\r\n     * @description Getter de la edad del estudiante.\r\n     * @see #edad\r\n     */ get edad() {\n        return this.#edad;\n    }\n    /**\r\n     * @type {Direccion}\r\n     * @description Getter de la dirección del estudiante.\r\n     * @see #direccion\r\n     */ get direccion() {\n        return this.#direccion;\n    }\n    /**\r\n     * @type {Array[]}\r\n     * @description Getter de las asignaturas del estudiante con sus correspondientes calificaciones.\r\n     * @see #asignaturas\r\n     */ get asignaturas() {\n        return [\n            ...this.#asignaturas\n        ];\n    }\n    /**\r\n     * @type {String[]}\r\n     * @description Getter de los registros del estudiante.\r\n     * @see #registros\r\n     */ get registros() {\n        const resultado = [];\n        for (const registro of this.#registros){\n            const asignatura = registro[0];\n            const fecha = registro[1].toLocaleDateString(\"es-ES\", {\n                weekday: \"long\",\n                year: \"numeric\",\n                month: \"short\",\n                day: \"numeric\"\n            });\n            const hora = registro[1].toLocaleTimeString(\"es-ES\");\n            const tipo = registro[2];\n            resultado.push(\"[\\t\" + tipo + \"\\t|\\t\" + asignatura + \"\\t|\\t\" + fecha + \" a las \" + hora + \"\\t]\");\n        }\n        return resultado;\n    }\n    /**\r\n     * @type {String | Number}\r\n     * @description **Promedio** de las calificaciones de las asignaturas del estudiante.\r\n     * @see #asignaturas\r\n     */ get promedio() {\n        const asignaturasCalificadas = this.#asignaturas.filter((a)=>typeof a[1] != \"string\");\n        if (asignaturasCalificadas.length == 0) return \"Sin evaluar\";\n        const resultado = asignaturasCalificadas.reduce((suma, asignatura)=>suma += asignatura[1], 0) / asignaturasCalificadas.length;\n        return Number(resultado).toFixed(2);\n    }\n    /**\r\n     * @function\r\n     * @override\r\n     * @returns {String} Id, nombre y edad del estudiante.\r\n     * @description Devuelve el id, nombre y edad del estudiante.\r\n     * @example \"[E1] Alonso Hernández Robles, 20\"\r\n     */ toString() {\n        return \"[\" + this.#id + \"] \" + this.#nombre + \", \" + this.#edad;\n    }\n    /**\r\n     * @function\r\n     * @param  {...Asignatura} asignaturas Asignaturas a matricular\r\n     * @description **Matricula** al estudiante de las asignaturas proporcionadas y genera un registro con dicha información.\r\n     * @see #asignaturas\r\n     * @see #registros\r\n     */ matricular(...asignaturas) {\n        for (const asignatura of asignaturas)if (this.#asignaturas.filter((a)=>a[0].nombre == asignatura.nombre).length == 0) {\n            this.#asignaturas.push([\n                asignatura,\n                \"Sin evaluar\"\n            ]);\n            this.#registros.push([\n                asignatura.nombre,\n                new Date(),\n                \"Matriculaci\\xf3n\"\n            ]);\n        }\n    }\n    /**\r\n     * @function\r\n     * @param  {...Asignatura} asignaturas Asignaturas a desmatricular\r\n     * @description **Desmatricula** al estudiante de las asignaturas proporcionadas y genera un registro con dicha información.\r\n     * @see #asignaturas\r\n     * @see #registros\r\n     */ desmatricular(...asignaturas) {\n        for (const asignatura of asignaturas)if (this.#asignaturas.map((a)=>a[0].nombre).includes(asignatura.nombre)) {\n            this.#asignaturas = this.#asignaturas.filter((a)=>a[0].nombre != asignatura.nombre);\n            this.#registros.push([\n                asignatura.nombre,\n                new Date(),\n                \"Desmatriculaci\\xf3n\"\n            ]);\n        }\n    }\n    /**\r\n     * @function\r\n     * @param {Asignatura} asignatura Asignatura a calificar\r\n     * @param {Number} nota Nota a asignar\r\n     * @throws {Error} Si la asignatura no está en el Array `#asignaturas`.\r\n     * @throws {Error} Si la nota no está entre `0` y `10`.\r\n     * @description **Califica** al estudiante en la asignatura proporcionada con la nota proporcionada.\r\n     * @see #asignaturas\r\n     */ calificar(asignatura, nota) {\n        if (!this.#asignaturas.map((a)=>a[0].nombre).includes(asignatura.nombre)) throw new Error(\"El estudiante no est\\xe1 cursando la asignatura.\");\n        if (nota < 0 || nota > 10) throw new Error(\"La nota debe estar entre 0 y 10.\");\n        for (const asig of this.#asignaturas)if (asig[0].nombre == asignatura.nombre) {\n            asig[1] = parseFloat(nota);\n            asignatura.a\\u00f1adirCalificacion(nota);\n            break;\n        }\n    }\n    /**\r\n     * @function\r\n     * @param {Number} numero Número de la id a eliminar\r\n     * @static\r\n     * @description **Elimina** un número de la lista de números ocupados.\r\n     * @see #numerosOcupados\r\n     */ static eliminarNumeroOcupado(numero) {\n        $e17884a1942f03bd$export$b6677c6d6502f2a3.#numerosOcupados = $e17884a1942f03bd$export$b6677c6d6502f2a3.#numerosOcupados.filter((n)=>n != numero);\n    }\n}\n\n\n\n/**\r\n * @file listaEstudiantes.js\r\n * @author Alonso Hernández Robles\r\n */ /**\r\n * @file lista.js\r\n * @author Alonso Hernández Robles\r\n */ /**\r\n * 2.4. Clase Lista\r\n * \r\n * Atributos:\r\n * \r\n * - listaRef: Array de objetos. Su getter devuelve la referencia original al Array. También tiene setter.\r\n *      Orientado para ser usado en la definición de las clases hijas ListaEstudiantes y ListaAsignaturas.\r\n * \r\n * Métodos:\r\n * \r\n * + constructor(): Inicializa vacío el Array #listaRef.\r\n * \r\n * + get lista(): Array de objetos. Devuelve una copia del Array #listaRef y no la referencia.\r\n *      Orientado para ser usado en la creación y uso de objetos ListaEstudiantes y/o ListaAsignaturas.\r\n */ /**\r\n * @class\r\n * @classdesc Representa una **lista** de objetos.\r\n */ class $52f39987efe4a5e7$export$d1790b43a08a06e3 {\n    /**\r\n     * @type {Object[]}\r\n     * @private\r\n     * @description Array de objetos.\r\n     * - Su getter devuelve la referencia original al Array. También tiene setter.\r\n     * > Orientado para ser usado en la definición de las clases hijas [`ListaEstudiantes`](ListaEstudiantes.html) y [`ListaAsignaturas`](ListaAsignaturas.html).\r\n     */ #listaRef;\n    /**\r\n     * @constructor\r\n     * @description Crea una **lista**.\r\n     * - Inicializa vacío el Array `#listaRef`.\r\n     * @see #listaRef\r\n     */ constructor(){\n        this.#listaRef = [];\n    }\n    /**\r\n     * @type {Object[]}\r\n     * @description Array de objetos.\r\n     * - Devuelve una copia del Array `#listaRef` y no la referencia.\r\n     * > Orientado para ser usado en la creación y uso de objetos [`ListaEstudiantes`](ListaEstudiantes.html) y/o [`ListaAsignaturas`](ListaAsignaturas.html).\r\n     * @see #listaRef\r\n     */ get lista() {\n        return [\n            ...this.#listaRef\n        ];\n    }\n    /**\r\n     * @type {Object[]}\r\n     * @description Getter del Array `#listaRef`.\r\n     * @see #listaRef\r\n     */ get listaRef() {\n        return this.#listaRef;\n    }\n    set listaRef(listaRef) {\n        this.#listaRef = listaRef;\n    }\n}\n\n\n\nclass $5250b04272ee957c$export$83bdf1a08e1b210c extends (0, $52f39987efe4a5e7$export$d1790b43a08a06e3) {\n    /**\r\n     * @constructor\r\n     * @param {...Estudiante} estudiantes Estudiantes a añadir\r\n     * @description Crea una **lista de estudiantes**.\r\n     * - Llama al constructor padre y añade los estudiantes mediante el método `añadirEstudiante()`.\r\n     */ constructor(...estudiantes){\n        super();\n        for (const estudiante of estudiantes)this.a\\u00f1adirEstudiante(estudiante);\n    }\n    /**\r\n     * @type {String | Number}\r\n     * @description **Promedio general**, de los promedios de los estudiantes.\r\n     * - Devuelve `\"Sin evaluar\"` si ningún promedio es un número.\r\n     * @see #listaRef\r\n     */ get promedioGeneral() {\n        const estudiantesCalificados = this.listaRef.filter((e)=>!isNaN(Number(e.promedio)));\n        if (estudiantesCalificados.length == 0) return \"Sin evaluar\";\n        const resultado = estudiantesCalificados.reduce((suma, estudiante)=>suma += Number.parseFloat(estudiante.promedio), 0) / estudiantesCalificados.length;\n        return Number(resultado).toFixed(2);\n    }\n    /**\r\n     * @function\r\n     * @description **Muestra**, mediante `console.log()`, `console.groupCollapsed()` y `console.groupEnd()`, el reporte con la información de todos los estudiantes del Array `listaRef`.\r\n     * \r\n     * > `console.log()` muestra por consola un mensaje.\r\n     * >\r\n     * > `console.groupCollapsed()` muestra por consola un mensaje cómo título de una carpeta colapsada de los mensajes que vayan a continuación.\r\n     * >\r\n     * > `console.groupEnd()` indica el final de dicha carpeta de mensajes.\r\n     * @see #listaRef\r\n     */ mostrarReporte() {\n        for (const estudiante of this.listaRef){\n            console.groupCollapsed(\"[\" + estudiante.id + \"] \" + estudiante.nombre, \"boton\");\n            console.groupCollapsed(\"\\tDatos Personales\", \"subtitulo\");\n            console.log(\"\\t\\t\\tNombre: \" + estudiante.nombre);\n            console.log(\"\\t\\t\\tEdad: \" + estudiante.edad);\n            console.groupCollapsed(\"\t\t\tDirecci\\xf3n\");\n            console.log(\"\\t\\t\\t\\t\\tCalle: \" + estudiante.direccion.calle);\n            console.log(\"\t\t\t\t\tN\\xfamero: \" + estudiante.direccion.numero);\n            console.log(\"\\t\\t\\t\\t\\tPiso: \" + estudiante.direccion.piso);\n            console.log(\"\t\t\t\t\tC\\xf3digo Postal: \" + estudiante.direccion.codigoPostal);\n            console.log(\"\\t\\t\\t\\t\\tProvincia: \" + estudiante.direccion.provincia);\n            console.log(\"\\t\\t\\t\\t\\tLocalidad: \" + estudiante.direccion.localidad);\n            console.groupEnd();\n            console.groupEnd();\n            console.groupCollapsed(\"\\tCalificaciones\", \"subtitulo\");\n            for (const asignatura of estudiante.asignaturas){\n                const notaAsignatura = typeof asignatura[1] == \"string\" ? asignatura[1] : Number(asignatura[1]).toFixed(2);\n                console.log(\"\\t\\t\\t\" + asignatura[0].nombre + \": \" + notaAsignatura);\n            }\n            console.log(\"\\t\\t\\tPromedio: \" + estudiante.promedio, \"font-weight: bold;\");\n            console.groupEnd();\n            console.groupEnd();\n        }\n    }\n    /**\r\n     * @function\r\n     * @param {Estudiante} estudiante Estudiante a añadir\r\n     * @throws {Error} Si el estudiante ya está en el Array `listaRef`.\r\n     * @description **Añade** un estudiante a la lista.\r\n     * - Ordena el Array según los números de las ids de los estudiantes.\r\n     * @see #listaRef\r\n     */ \"a\\xf1adirEstudiante\"(estudiante) {\n        if (this.listaRef.filter((e)=>e.id == estudiante.id).length != 0) throw new Error(\"Ya existe el estudiante.\");\n        this.listaRef.push(estudiante);\n        this.listaRef.sort((e1, e2)=>parseInt(e1.id.slice(1)) - parseInt(e2.id.slice(1)));\n    }\n    /**\r\n     * @function\r\n     * @param {String} id Id del estudiante a eliminar\r\n     * @throws {Error} Si el estudiante no está en el Array `listaRef`.\r\n     * @description **Elimina** un estudiante de la lista.\r\n     * - Elimina el número ocupado de la id del estudiante.\r\n     * @see #listaRef\r\n     */ eliminarEstudiante(id) {\n        if (this.listaRef.filter((e)=>e.id != id).length == this.listaRef.length) throw new Error(\"El estudiante no se encuentra en la lista.\");\n        this.listaRef = this.listaRef.filter((e)=>e.id != id);\n        (0, $e17884a1942f03bd$export$b6677c6d6502f2a3).eliminarNumeroOcupado(id.slice(1));\n    }\n    /**\r\n     * @function\r\n     * @param {String} exp Expresión a buscar\r\n     * @returns {Estudiante[]} Estudiantes cuyos nombres incluyen el String `exp`.\r\n     * @description **Busca** estudiantes cuyos nombres incluyen el String `exp`.\r\n     * @see #listaRef\r\n     */ busquedaEstudiantes(exp) {\n        return this.listaRef.filter((e)=>e.nombre.toLowerCase().includes(exp.toLowerCase()));\n    }\n}\n\n\n/**\r\n * @file listaAsignaturas.js\r\n * @author Alonso Hernández Robles\r\n */ \n\nclass $6e53ae232239c912$export$aefcd64e193e4bb0 extends (0, $52f39987efe4a5e7$export$d1790b43a08a06e3) {\n    /**\r\n     * @constructor\r\n     * @param {...Asignatura} asignaturas Asignaturas a añadir\r\n     * @description Crea una **lista de asignaturas**.\r\n     * - Llama al constructor padre y añade las asignaturas mediante el método `añadirAsignatura()`.\r\n     */ constructor(...asignaturas){\n        super();\n        for (const asignatura of asignaturas)this.a\\u00f1adirAsignatura(asignatura);\n    }\n    /**\r\n     * @function\r\n     * @param {Asignatura} asignatura Asignatura a añadir\r\n     * @throws {Error} Si la asignatura ya está en el Array `listaRef`.\r\n     * @description **Añade** una asignatura a la lista.\r\n     * @see #listaRef\r\n     */ \"a\\xf1adirAsignatura\"(asignatura) {\n        if (this.listaRef.filter((a)=>a.nombre == asignatura.nombre).length != 0) throw new Error(\"Ya existe la asignatura.\");\n        this.listaRef.push(asignatura);\n    }\n    /**\r\n     * @function\r\n     * @param {String} nombre Nombre de la asignatura a eliminar\r\n     * @throws {Error} Si la asignatura no está en el Array `listaRef`.\r\n     * @description **Elimina** una asignatura de la lista.\r\n     * @see #listaRef\r\n     */ eliminarAsignatura(nombre) {\n        if (this.listaRef.filter((a)=>a.nombre == nombre).length == 0) throw new Error(\"La asignatura no se encuentra en la lista.\");\n        this.listaRef = this.listaRef.filter((a)=>a.nombre != nombre);\n    }\n    /**\r\n     * @function\r\n     * @param {String} exp Expresión a buscar\r\n     * @returns {Asignatura[]} Asignaturas cuyos nombres incluyen el String `exp`.\r\n     * @description **Busca** asignaturas cuyos nombres incluyen el String `exp`.\r\n     * @see #listaRef\r\n     */ busquedaAsignaturas(exp) {\n        return this.listaRef.filter((a)=>a.nombre.toLowerCase().includes(exp.toLowerCase()));\n    }\n}\n\n\nconst $d7137dbc75aee9e1$var$defaultConsoleLog = console.log;\nconsole.log = (texto, estilos = \"\", otrosEstilos = \"\")=>{\n    texto = \"%c\" + texto;\n    switch(estilos){\n        case \"boton\":\n            estilos = \"padding: 10px;\";\n            estilos += \"border: 5px solid gray;\";\n            estilos += \"border-radius: 10px;\";\n            estilos += \"background-color: white;\";\n            estilos += \"color: black;\";\n            estilos += \"font-size: 20px;\";\n            estilos += \"margin: 5px;\";\n            break;\n        case \"titulo\":\n            estilos = \"font-size: 50px;\";\n            estilos += \"margin: 5px;\";\n            break;\n        case \"subtitulo\":\n            estilos = \"font-size: 30px;\";\n            estilos += \"color: #BBBBBB;\";\n            estilos += \"padding: 2px;\";\n            break;\n        default:\n            estilos += \"font-size: 20px;\";\n            estilos += \"padding: 10px;\";\n            break;\n    }\n    estilos += \"font-family: Rubik, sans-serif;\" + otrosEstilos;\n    $d7137dbc75aee9e1$var$defaultConsoleLog.call(console, texto, estilos);\n};\n/**\r\n * @global\r\n * @constant\r\n * @type {Function}\r\n * @description **Función original** de `console.groupCollapsed()`.\r\n */ const $d7137dbc75aee9e1$var$defaultConsoleGroupCollapsed = console.groupCollapsed;\nconsole.groupCollapsed = (texto, estilos = \"\")=>{\n    texto = \"%c\" + texto;\n    switch(estilos){\n        case \"boton\":\n            estilos = \"padding: 10px;\";\n            estilos += \"border: 5px solid gray;\";\n            estilos += \"border-radius: 10px;\";\n            estilos += \"background-color: white;\";\n            estilos += \"color: black;\";\n            estilos += \"font-size: 30px;\";\n            estilos += \"margin: 5px;\";\n            break;\n        case \"subtitulo\":\n            estilos = \"font-size: 30px;\";\n            estilos += \"padding: 10px;\";\n            break;\n        default:\n            estilos += \"font-size: 20px;\";\n            estilos += \"padding: 10px;\";\n            break;\n    }\n    estilos += \"font-family: 'Rubik', sans-serif; font-weight: normal;\";\n    $d7137dbc75aee9e1$var$defaultConsoleGroupCollapsed.call(console, texto, estilos);\n};\n/**\r\n * 3. Programa Principal.\r\n * \r\n * En esta sección se declara un objeto ListaEstudiantes, otro objeto ListaAsignaturas, y un Array de objetos\r\n * Direccion llamado listaDirecciones. Seguidamente, se entra en el bucle while.\r\n * \r\n * Extra: Se inicializan y añaden 5 direcciones, 5 estudiantes y 5 asignaturas.\r\n *        Se matriculan a algunos estudiantes de algunas asignaturas.\r\n *        Se desmatriculan a algunos estudiantes de algunas asignaturas.\r\n *        Se califican a algunos estudiantes en algunas asignaturas.\r\n * \r\n * Por siempre, se preguntará la elección principal de la acción a realizar.\r\n * La variable eleccion será la variable que siempre obtenga el valor de window.prompt().\r\n */ /**\r\n * @global\r\n * @constant\r\n * @type {ListaEstudiantes} \r\n * @description **Lista** de **estudiantes**.\r\n * @see ListaEstudiantes\r\n */ const $d7137dbc75aee9e1$var$listaEstudiantes = new (0, $5250b04272ee957c$export$83bdf1a08e1b210c)();\n/**\r\n * @global\r\n * @constant\r\n * @type {ListaAsignaturas} \r\n * @description **Lista** de **asignaturas**.\r\n * @see ListaAsignaturas\r\n */ const $d7137dbc75aee9e1$var$listaAsignaturas = new (0, $6e53ae232239c912$export$aefcd64e193e4bb0)();\n/**\r\n * @global\r\n * @type {Direccion[]}\r\n * @description Lista de **direcciones**.\r\n * @see Direccion\r\n */ let $d7137dbc75aee9e1$var$listaDirecciones = [];\n/**\r\n * @global\r\n * @type {Number}\r\n * @description **Elección** de la acción a realizar.\r\n */ let $d7137dbc75aee9e1$var$eleccion;\n// Creación de Direcciones\n$d7137dbc75aee9e1$var$listaDirecciones.push(new (0, $82d6b8e4673e1777$export$5f64543799e2ffa6)(\"C/ Af\\xe1n de Ribera\", 15, \"2\\xbaA\", 18005, \"Granada\", \"Granada\"));\n$d7137dbc75aee9e1$var$listaDirecciones.push(new (0, $82d6b8e4673e1777$export$5f64543799e2ffa6)(\"C/ Aliatar\", 17, \"Piso Bajo\", 18110, \"Granada\", \"H\\xedjar\"));\n$d7137dbc75aee9e1$var$listaDirecciones.push(new (0, $82d6b8e4673e1777$export$5f64543799e2ffa6)(\"C/ Canalejas\", 5, \"2\\xbaB\", 23790, \"Ja\\xe9n\", \"Porcuna\"));\n$d7137dbc75aee9e1$var$listaDirecciones.push(new (0, $82d6b8e4673e1777$export$5f64543799e2ffa6)(\"C/ Paraguay\", 1, \"Piso Bajo\", 18210, \"Granada\", \"Peligros\"));\n$d7137dbc75aee9e1$var$listaDirecciones.push(new (0, $82d6b8e4673e1777$export$5f64543799e2ffa6)(\"C/ M\\xe1laga\", 23, \"5\\xbaC\", 29770, \"M\\xe1laga\", \"Torrox\"));\n// Creación de Estudiantes\n$d7137dbc75aee9e1$var$listaEstudiantes.a\\u00f1adirEstudiante(new (0, $e17884a1942f03bd$export$b6677c6d6502f2a3)(\"Alonso Hern\\xe1ndez Robles\", 21, $d7137dbc75aee9e1$var$listaDirecciones[0]));\n$d7137dbc75aee9e1$var$listaEstudiantes.a\\u00f1adirEstudiante(new (0, $e17884a1942f03bd$export$b6677c6d6502f2a3)(\"\\xc1lex Gal\\xe1n Varo\", 20, $d7137dbc75aee9e1$var$listaDirecciones[1]));\n$d7137dbc75aee9e1$var$listaEstudiantes.a\\u00f1adirEstudiante(new (0, $e17884a1942f03bd$export$b6677c6d6502f2a3)(\"Ana Quero de La Rosa\", 19, $d7137dbc75aee9e1$var$listaDirecciones[2]));\n$d7137dbc75aee9e1$var$listaEstudiantes.a\\u00f1adirEstudiante(new (0, $e17884a1942f03bd$export$b6677c6d6502f2a3)(\"Adri\\xe1n Mart\\xedn V\\xe1zquez\", 19, $d7137dbc75aee9e1$var$listaDirecciones[3]));\n$d7137dbc75aee9e1$var$listaEstudiantes.a\\u00f1adirEstudiante(new (0, $e17884a1942f03bd$export$b6677c6d6502f2a3)(\"Javier Escobar Vela\", 22, $d7137dbc75aee9e1$var$listaDirecciones[4]));\n// Creación de Asignaturas\n$d7137dbc75aee9e1$var$listaAsignaturas.a\\u00f1adirAsignatura(new (0, $5d2658e116f5834d$export$e35364a509610a06)(\"DWEC\"));\n$d7137dbc75aee9e1$var$listaAsignaturas.a\\u00f1adirAsignatura(new (0, $5d2658e116f5834d$export$e35364a509610a06)(\"DWES\"));\n$d7137dbc75aee9e1$var$listaAsignaturas.a\\u00f1adirAsignatura(new (0, $5d2658e116f5834d$export$e35364a509610a06)(\"DEAW\"));\n$d7137dbc75aee9e1$var$listaAsignaturas.a\\u00f1adirAsignatura(new (0, $5d2658e116f5834d$export$e35364a509610a06)(\"DIW\"));\n$d7137dbc75aee9e1$var$listaAsignaturas.a\\u00f1adirAsignatura(new (0, $5d2658e116f5834d$export$e35364a509610a06)(\"EIE\"));\n// Matriculación de Estudiantes\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[0].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[0]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[0].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[1]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[0].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[2]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[0].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[3]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[0].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[4]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[1].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[0]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[1].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[1]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[1].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[2]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[1].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[3]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[2].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[1]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[2].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[2]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[2].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[3]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[3].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[2]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[3].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[3]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[3].matricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[4]);\n// Desmatriculaciones de Estudiantes\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[0].desmatricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[4]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[1].desmatricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[2]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[2].desmatricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[1]);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[3].desmatricular($d7137dbc75aee9e1$var$listaAsignaturas.lista[3]);\n// Calificación de Estudiantes\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[0].calificar($d7137dbc75aee9e1$var$listaAsignaturas.lista[0], 10);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[0].calificar($d7137dbc75aee9e1$var$listaAsignaturas.lista[1], 9.3);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[0].calificar($d7137dbc75aee9e1$var$listaAsignaturas.lista[3], 9);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[1].calificar($d7137dbc75aee9e1$var$listaAsignaturas.lista[1], 9.4);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[2].calificar($d7137dbc75aee9e1$var$listaAsignaturas.lista[2], 8.3);\n$d7137dbc75aee9e1$var$listaEstudiantes.lista[2].calificar($d7137dbc75aee9e1$var$listaAsignaturas.lista[3], 8.85);\n// Bucle while\nwhile(true){\n    console.clear();\n    console.log(\"SGAEA\", \"titulo\");\n    console.log(\"(Sistema de Gesti\\xf3n Acad\\xe9mica de Estudiantes y Asignaturas)\", \"subtitulo\");\n    console.log(\"1. \\u2795 Crear...\", \"boton\");\n    console.log(\"2. \\u2796 Eliminar...\", \"boton\");\n    console.log(\"3. \\u270D Matricular...\", \"boton\");\n    console.log(\"4. \\uD83D\\uDCE4 Desmatricular...\", \"boton\");\n    console.log(\"5. \\uD83D\\uDCCB Registro de Auditor\\xeda\", \"boton\");\n    console.log(\"6. \\uD83D\\uDD22 Calificar...\", \"boton\");\n    console.log(\"7. \\uD83D\\uDD0E Buscar...\", \"boton\");\n    console.log(\"8. \\uD83D\\uDCB0 Calcular Promedio...\", \"boton\");\n    console.log(\"9. \\uD83E\\uDDFE Mostrar Reporte\", \"boton\");\n    $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Elecci\\xf3n:\"));\n    switch($d7137dbc75aee9e1$var$eleccion){\n        /**\r\n         * 3.1. Crear\r\n         * \r\n         * Siempre se pueden crear direcciones, estudiantes y/o asignaturas.\r\n         */ case 1:\n            do {\n                console.clear();\n                console.log(\"Crear \\u2795\", \"titulo\");\n                console.log(\"1. \\uD83C\\uDFE0 Direcci\\xf3n\", \"boton\");\n                console.log(\"2. \\uD83D\\uDC68\\u200D\\uD83C\\uDF93 Estudiante\", \"boton\");\n                console.log(\"3. \\uD83D\\uDCD5 Asignatura\", \"boton\");\n                console.log(\"0. \\u23EA Volver\", \"boton\");\n                $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Elecci\\xf3n:\"));\n                console.clear();\n                switch($d7137dbc75aee9e1$var$eleccion){\n                    /**\r\n                     * 3.1.1. Crear Dirección\r\n                     * \r\n                     * Se pedirá calle, número, piso, código postal, provincia y localidad.\r\n                     * Al crearla, se guardará en el Array listaDirecciones.\r\n                     */ case 1:\n                        console.log(\"Crear Direcci\\xf3n \\u2795\\uD83C\\uDFE0\", \"titulo\");\n                        console.log(\"Calle: \");\n                        do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Calle:\");\n                        while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                        const calle = $d7137dbc75aee9e1$var$eleccion;\n                        console.clear();\n                        console.log(\"Crear Direcci\\xf3n \\u2795\\uD83C\\uDFE0\", \"titulo\");\n                        console.log(\"Calle: \" + calle);\n                        console.log(\"N\\xfamero: \");\n                        do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"N\\xfamero:\");\n                        while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                        const numero = $d7137dbc75aee9e1$var$eleccion;\n                        console.clear();\n                        console.log(\"Crear Direcci\\xf3n \\u2795\\uD83C\\uDFE0\", \"titulo\");\n                        console.log(\"Calle: \" + calle);\n                        console.log(\"N\\xfamero: \" + numero);\n                        console.log(\"Piso: \");\n                        do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Piso:\");\n                        while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                        const piso = $d7137dbc75aee9e1$var$eleccion;\n                        console.clear();\n                        console.log(\"Crear Direcci\\xf3n \\u2795\\uD83C\\uDFE0\", \"titulo\");\n                        console.log(\"Calle: \" + calle);\n                        console.log(\"N\\xfamero: \" + numero);\n                        console.log(\"Piso: \" + piso);\n                        console.log(\"C\\xf3digo Postal: \");\n                        do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"C\\xf3digo Postal:\");\n                        while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                        const codigoPostal = $d7137dbc75aee9e1$var$eleccion;\n                        console.clear();\n                        console.log(\"Crear Direcci\\xf3n \\u2795\\uD83C\\uDFE0\", \"titulo\");\n                        console.log(\"Calle: \" + calle);\n                        console.log(\"N\\xfamero: \" + numero);\n                        console.log(\"Piso: \" + piso);\n                        console.log(\"C\\xf3digo Postal: \" + codigoPostal);\n                        console.log(\"Provincia: \");\n                        do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Provincia:\");\n                        while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                        const provincia = $d7137dbc75aee9e1$var$eleccion;\n                        console.clear();\n                        console.log(\"Crear Direcci\\xf3n \\u2795\\uD83C\\uDFE0\", \"titulo\");\n                        console.log(\"Calle: \" + calle);\n                        console.log(\"N\\xfamero: \" + numero);\n                        console.log(\"Piso: \" + piso);\n                        console.log(\"C\\xf3digo Postal: \" + codigoPostal);\n                        console.log(\"Provincia: \" + provincia);\n                        console.log(\"Localidad: \");\n                        do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Localidad:\");\n                        while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                        const localidad = $d7137dbc75aee9e1$var$eleccion;\n                        console.clear();\n                        console.log(\"Crear Direcci\\xf3n \\u2795\\uD83C\\uDFE0\", \"titulo\");\n                        console.log(\"Direcci\\xf3n Creada \\u2705\", \"subtitulo\");\n                        console.log(\"Calle: \" + calle);\n                        console.log(\"N\\xfamero: \" + numero);\n                        console.log(\"Piso: \" + piso);\n                        console.log(\"C\\xf3digo Postal: \" + codigoPostal);\n                        console.log(\"Provincia: \" + provincia);\n                        console.log(\"Localidad: \" + localidad);\n                        window.alert(\"Direcci\\xf3n creada correctamente.\");\n                        $d7137dbc75aee9e1$var$listaDirecciones.push(new (0, $82d6b8e4673e1777$export$5f64543799e2ffa6)(calle, numero, piso, codigoPostal, provincia, localidad));\n                        $d7137dbc75aee9e1$var$eleccion = 0;\n                        break;\n                    /**\r\n                     * 3.1.2. Crear Estudiante\r\n                     * \r\n                     * Si el Array listaDirecciones no está vacío, se pedirá si se quiere usar una dirección.\r\n                     * Si no, se pedirá calle, número, piso, código postal, provincia y localidad y se\r\n                     * preguntará si se quiere guardar la dirección en el Array listaDirecciones.\r\n                     * \r\n                     * Se pedirá nombre y edad, y se creará el estudiante.\r\n                     */ case 2:\n                        console.log(\"Crear Estudiante \\u2795\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                        let direccion;\n                        if ($d7137dbc75aee9e1$var$listaDirecciones.length > 0 && window.confirm(\"\\xbfDesea elegir una direcci\\xf3n ya creada?\")) {\n                            console.clear();\n                            console.log(\"Crear Estudiante \\u2795\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                            console.log(\"Seleccionar Direcci\\xf3n \\uD83C\\uDFE0\", \"subtitulo\");\n                            for (const dir of $d7137dbc75aee9e1$var$listaDirecciones)console.log($d7137dbc75aee9e1$var$listaDirecciones.indexOf(dir) + 1 + \". \" + dir.toString(), \"boton\");\n                            console.log(\"0. \\u23EA Volver\", \"boton\");\n                            do {\n                                $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Escoja una direcci\\xf3n:\"));\n                                if (Number.isNaN($d7137dbc75aee9e1$var$eleccion)) $d7137dbc75aee9e1$var$eleccion = -1;\n                            }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > $d7137dbc75aee9e1$var$listaDirecciones.length);\n                            if ($d7137dbc75aee9e1$var$eleccion == 0) {\n                                $d7137dbc75aee9e1$var$eleccion = -1;\n                                break;\n                            }\n                            direccion = $d7137dbc75aee9e1$var$listaDirecciones[$d7137dbc75aee9e1$var$eleccion - 1];\n                        } else {\n                            console.clear();\n                            console.log(\"Crear Estudiante \\u2795\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                            console.log(\"Establecer Direcci\\xf3n \\uD83C\\uDFE0\", \"subtitulo\");\n                            console.log(\"Calle: \");\n                            do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Calle:\");\n                            while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                            const calle = $d7137dbc75aee9e1$var$eleccion;\n                            console.clear();\n                            console.log(\"Crear Estudiante \\u2795\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                            console.log(\"Establecer Direcci\\xf3n \\uD83C\\uDFE0\", \"subtitulo\");\n                            console.log(\"Calle: \" + calle);\n                            console.log(\"N\\xfamero: \");\n                            do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"N\\xfamero:\");\n                            while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                            const numero = $d7137dbc75aee9e1$var$eleccion;\n                            console.clear();\n                            console.log(\"Crear Estudiante \\u2795\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                            console.log(\"Establecer Direcci\\xf3n \\uD83C\\uDFE0\", \"subtitulo\");\n                            console.log(\"Calle: \" + calle);\n                            console.log(\"N\\xfamero: \" + numero);\n                            console.log(\"Piso: \");\n                            do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Piso:\");\n                            while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                            const piso = $d7137dbc75aee9e1$var$eleccion;\n                            console.clear();\n                            console.log(\"Crear Estudiante \\u2795\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                            console.log(\"Establecer Direcci\\xf3n \\uD83C\\uDFE0\", \"subtitulo\");\n                            console.log(\"Calle: \" + calle);\n                            console.log(\"N\\xfamero: \" + numero);\n                            console.log(\"Piso: \" + piso);\n                            console.log(\"C\\xf3digo Postal: \");\n                            do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"C\\xf3digo Postal:\");\n                            while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                            const codigoPostal = $d7137dbc75aee9e1$var$eleccion;\n                            console.clear();\n                            console.log(\"Crear Estudiante \\u2795\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                            console.log(\"Establecer Direcci\\xf3n \\uD83C\\uDFE0\", \"subtitulo\");\n                            console.log(\"Calle: \" + calle);\n                            console.log(\"N\\xfamero: \" + numero);\n                            console.log(\"Piso: \" + piso);\n                            console.log(\"C\\xf3digo Postal: \" + codigoPostal);\n                            console.log(\"Provincia: \");\n                            do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Provincia:\");\n                            while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                            const provincia = $d7137dbc75aee9e1$var$eleccion;\n                            console.clear();\n                            console.log(\"Crear Estudiante \\u2795\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                            console.log(\"Establecer Direcci\\xf3n \\uD83C\\uDFE0\", \"subtitulo\");\n                            console.log(\"Calle: \" + calle);\n                            console.log(\"N\\xfamero: \" + numero);\n                            console.log(\"Piso: \" + piso);\n                            console.log(\"C\\xf3digo Postal: \" + codigoPostal);\n                            console.log(\"Provincia: \" + provincia);\n                            console.log(\"Localidad: \");\n                            do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Localidad:\");\n                            while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                            const localidad = $d7137dbc75aee9e1$var$eleccion;\n                            console.clear();\n                            console.log(\"Crear Estudiante \\u2795\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                            console.log(\"Direcci\\xf3n Establecida \\u2705\", \"subtitulo\");\n                            console.log(\"Calle: \" + calle);\n                            console.log(\"N\\xfamero: \" + numero);\n                            console.log(\"Piso: \" + piso);\n                            console.log(\"C\\xf3digo Postal: \" + codigoPostal);\n                            console.log(\"Provincia: \" + provincia);\n                            console.log(\"Localidad: \" + localidad);\n                            direccion = new (0, $82d6b8e4673e1777$export$5f64543799e2ffa6)(calle, numero, piso, codigoPostal, provincia, localidad);\n                            if (window.confirm(\"\\xbfDesea guardar esta direcci\\xf3n?\")) {\n                                $d7137dbc75aee9e1$var$listaDirecciones.push(direccion);\n                                console.clear();\n                                console.log(\"Crear Estudiante \\u2795\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                                console.log(\"Direcci\\xf3n Guardada \\u2705\", \"subtitulo\");\n                                console.log(\"Calle: \" + calle);\n                                console.log(\"N\\xfamero: \" + numero);\n                                console.log(\"Piso: \" + piso);\n                                console.log(\"C\\xf3digo Postal: \" + codigoPostal);\n                                console.log(\"Provincia: \" + provincia);\n                                console.log(\"Localidad: \" + localidad);\n                                window.alert(\"Direcci\\xf3n guardada correctamente.\");\n                            }\n                        }\n                        console.clear();\n                        console.log(\"Crear Estudiante \\u2795\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                        console.log(\"Nombre: \");\n                        do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Nombre:\");\n                        while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                        const nombreEstudiante = $d7137dbc75aee9e1$var$eleccion;\n                        console.clear();\n                        console.log(\"Crear Estudiante \\u2795\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                        console.log(\"Nombre: \" + nombreEstudiante);\n                        console.log(\"Edad: \");\n                        do {\n                            $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Edad:\"));\n                            if (Number.isNaN($d7137dbc75aee9e1$var$eleccion)) $d7137dbc75aee9e1$var$eleccion = -1;\n                        }while ($d7137dbc75aee9e1$var$eleccion < 0);\n                        const edad = $d7137dbc75aee9e1$var$eleccion;\n                        console.clear();\n                        console.log(\"Crear Estudiante \\u2795\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                        try {\n                            $d7137dbc75aee9e1$var$listaEstudiantes.a\\u00f1adirEstudiante(new (0, $e17884a1942f03bd$export$b6677c6d6502f2a3)(nombreEstudiante, edad, direccion));\n                            console.log(\"Estudiante Creado \\u2705\", \"subtitulo\");\n                            console.log(\"Nombre: \" + nombreEstudiante);\n                            console.log(\"Edad: \" + edad);\n                            console.log(\"Direcci\\xf3n: \" + direccion.toString());\n                            window.alert(\"Estudiante creado correctamente.\");\n                        } catch (error) {\n                            console.log(\"Estudiante No Creado \\u274C\", \"subtitulo\");\n                            console.log(\"Nombre: \" + nombreEstudiante);\n                            console.log(\"Edad: \" + edad);\n                            console.log(\"Direcci\\xf3n: \" + direccion.toString());\n                            window.alert(error);\n                        }\n                        $d7137dbc75aee9e1$var$eleccion = 0;\n                        break;\n                    /**\r\n                     * 3.1.3. Crear Asignatura\r\n                     * \r\n                     * Se pedirá nombre, y se creará la asignatura sólo si el listaAsignaturas no contiene\r\n                     * una asignatura con el mismo nombre.\r\n                     */ case 3:\n                        console.log(\"Crear Asignatura \\u2795\\uD83D\\uDCD5\", \"titulo\");\n                        console.log(\"Nombre: \");\n                        do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Nombre:\");\n                        while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() === \"\");\n                        const nombreAsignatura = $d7137dbc75aee9e1$var$eleccion;\n                        console.clear();\n                        console.log(\"Crear Asignatura \\u2795\\uD83D\\uDCD5\", \"titulo\");\n                        try {\n                            $d7137dbc75aee9e1$var$listaAsignaturas.a\\u00f1adirAsignatura(new (0, $5d2658e116f5834d$export$e35364a509610a06)(nombreAsignatura));\n                            console.log(\"Asignatura Creada \\u2705\", \"subtitulo\");\n                            console.log(\"Nombre: \" + nombreAsignatura);\n                            window.alert(\"Asignatura creada correctamente.\");\n                        } catch (error) {\n                            console.log(\"Asignatura No Creada \\u274C\", \"subtitulo\");\n                            console.log(\"Nombre: \" + nombreAsignatura);\n                            window.alert(error);\n                        }\n                        $d7137dbc75aee9e1$var$eleccion = 0;\n                        break;\n                }\n            }while ($d7137dbc75aee9e1$var$eleccion != 0);\n            break;\n        /**\r\n         * 3.2. Eliminar\r\n         * \r\n         * No se podrá acceder a Eliminar si no existe ningún dato, ya sea dirección, estudiante o asignatura.\r\n         */ case 2:\n            do {\n                if ($d7137dbc75aee9e1$var$listaDirecciones.length == 0 && $d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0 && $d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                    window.alert(\"No existen datos registrados.\");\n                    break;\n                }\n                console.clear();\n                console.log(\"Eliminar \\u2796\", \"titulo\");\n                console.log(\"1. \\uD83C\\uDFE0 Direcci\\xf3n\", \"boton\");\n                console.log(\"2. \\uD83D\\uDC68\\u200D\\uD83C\\uDF93 Estudiante\", \"boton\");\n                console.log(\"3. \\uD83D\\uDCD5 Asignatura\", \"boton\");\n                console.log(\"0. \\u23EA Volver\", \"boton\");\n                $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Elecci\\xf3n:\"));\n                switch($d7137dbc75aee9e1$var$eleccion){\n                    /**\r\n                     * 3.2.1. Eliminar Dirección\r\n                     * \r\n                     * Si hay direcciones en el Array listaDirecciones, se escoge una de ellas para su\r\n                     * eliminación.\r\n                     */ case 1:\n                        if ($d7137dbc75aee9e1$var$listaDirecciones.length == 0) {\n                            window.alert(\"No existen direcciones registradas.\");\n                            break;\n                        }\n                        console.clear();\n                        console.log(\"Eliminar Direcci\\xf3n \\u2796\\uD83C\\uDFE0\", \"titulo\");\n                        for (const direccion of $d7137dbc75aee9e1$var$listaDirecciones)console.log($d7137dbc75aee9e1$var$listaDirecciones.indexOf(direccion) + 1 + \". \" + direccion.toString(), \"boton\");\n                        console.log(\"0. \\u23EA Volver\", \"boton\");\n                        do {\n                            $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Escoja una direcci\\xf3n:\"));\n                            if (Number.isNaN($d7137dbc75aee9e1$var$eleccion)) $d7137dbc75aee9e1$var$eleccion = -1;\n                        }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > $d7137dbc75aee9e1$var$listaDirecciones.length);\n                        if ($d7137dbc75aee9e1$var$eleccion == 0) {\n                            $d7137dbc75aee9e1$var$eleccion = -1;\n                            break;\n                        }\n                        $d7137dbc75aee9e1$var$listaDirecciones = $d7137dbc75aee9e1$var$listaDirecciones.filter((d, indice)=>indice != $d7137dbc75aee9e1$var$eleccion - 1);\n                        console.clear();\n                        console.log(\"Eliminar Direcci\\xf3n \\u2796\\uD83C\\uDFE0\", \"titulo\");\n                        console.log(\"Direcci\\xf3n Eliminada \\u2705\", \"subtitulo\");\n                        for (const direccion of $d7137dbc75aee9e1$var$listaDirecciones){\n                            if ($d7137dbc75aee9e1$var$listaDirecciones.length == 0) {\n                                console.log(\"No existen direcciones registradas.\");\n                                break;\n                            }\n                            console.log($d7137dbc75aee9e1$var$listaDirecciones.indexOf(direccion) + 1 + \". \" + direccion.toString(), \"boton\");\n                        }\n                        window.alert(\"Direcci\\xf3n eliminada correctamente.\");\n                        $d7137dbc75aee9e1$var$eleccion = 0;\n                        break;\n                    /**\r\n                     * 3.2.2. Eliminar Estudiante\r\n                     * \r\n                     * Si existen estudiantes en listaEstudiantes, se escoge un estudiante para su\r\n                     * eliminación.\r\n                     */ case 2:\n                        if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0) {\n                            window.alert(\"No existen estudiantes registrados.\");\n                            break;\n                        }\n                        console.clear();\n                        console.log(\"Eliminar Estudiante \\u2796\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                        for (const estudiante of $d7137dbc75aee9e1$var$listaEstudiantes.lista)console.log($d7137dbc75aee9e1$var$listaEstudiantes.lista.indexOf(estudiante) + 1 + \". \" + estudiante.toString(), \"boton\");\n                        console.log(\"0. \\u23EA Volver\", \"boton\");\n                        do {\n                            $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Escoja un estudiante:\"));\n                            if (Number.isNaN($d7137dbc75aee9e1$var$eleccion)) $d7137dbc75aee9e1$var$eleccion = -1;\n                        }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > $d7137dbc75aee9e1$var$listaEstudiantes.lista.length);\n                        if ($d7137dbc75aee9e1$var$eleccion == 0) {\n                            $d7137dbc75aee9e1$var$eleccion = -1;\n                            break;\n                        }\n                        try {\n                            $d7137dbc75aee9e1$var$listaEstudiantes.eliminarEstudiante($d7137dbc75aee9e1$var$listaEstudiantes.lista[$d7137dbc75aee9e1$var$eleccion - 1].id);\n                            console.clear();\n                            console.log(\"Eliminar Estudiante \\u2796\\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"titulo\");\n                            console.log(\"Estudiante Eliminado \\u2705\", \"subtitulo\");\n                            for (const estudiante of $d7137dbc75aee9e1$var$listaEstudiantes.lista){\n                                if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0) {\n                                    console.log(\"No existen estudiantes registrados.\");\n                                    break;\n                                }\n                                console.log($d7137dbc75aee9e1$var$listaEstudiantes.lista.indexOf(estudiante) + 1 + \". \" + estudiante.toString(), \"boton\");\n                            }\n                            window.alert(\"Estudiante eliminado correctamente.\");\n                        } catch (error) {\n                            window.alert(error);\n                        }\n                        $d7137dbc75aee9e1$var$eleccion = 0;\n                        break;\n                    /**\r\n                     * 3.2.3. Eliminar Asignatura\r\n                     * \r\n                     * Si hay asignaturas en listaAsignaturas, se escoge una asignatura para su eliminación.\r\n                     */ case 3:\n                        if ($d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                            window.alert(\"No existen asignaturas registradas.\");\n                            break;\n                        }\n                        console.clear();\n                        console.log(\"Eliminar Asignatura \\u2796\\uD83D\\uDCD5\", \"titulo\");\n                        for (const asignatura of $d7137dbc75aee9e1$var$listaAsignaturas.lista)console.log($d7137dbc75aee9e1$var$listaAsignaturas.lista.indexOf(asignatura) + 1 + \". \" + asignatura.toString(), \"boton\");\n                        console.log(\"0. \\u23EA Volver\", \"boton\");\n                        do {\n                            $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Escoja una asignatura:\"));\n                            if (Number.isNaN($d7137dbc75aee9e1$var$eleccion)) $d7137dbc75aee9e1$var$eleccion = -1;\n                        }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > $d7137dbc75aee9e1$var$listaAsignaturas.lista.length);\n                        if ($d7137dbc75aee9e1$var$eleccion == 0) {\n                            $d7137dbc75aee9e1$var$eleccion = -1;\n                            break;\n                        }\n                        try {\n                            $d7137dbc75aee9e1$var$listaAsignaturas.eliminarAsignatura($d7137dbc75aee9e1$var$listaAsignaturas.lista[$d7137dbc75aee9e1$var$eleccion - 1].toString());\n                            console.clear();\n                            console.log(\"Eliminar Asignatura \\u2796\\uD83D\\uDCD5\", \"titulo\");\n                            console.log(\"Asignatura Eliminada \\u2705\", \"subtitulo\");\n                            for (const asignatura of $d7137dbc75aee9e1$var$listaAsignaturas.lista){\n                                if ($d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                                    console.log(\"No existen asignaturas registradas.\");\n                                    break;\n                                }\n                                console.log($d7137dbc75aee9e1$var$listaAsignaturas.lista.indexOf(asignatura) + 1 + \". \" + asignatura.toString(), \"boton\");\n                            }\n                            window.alert(\"Asignatura eliminada correctamente.\");\n                        } catch (error) {\n                            window.alert(error);\n                        }\n                        $d7137dbc75aee9e1$var$eleccion = 0;\n                        break;\n                }\n            }while ($d7137dbc75aee9e1$var$eleccion != 0);\n            break;\n        /**\r\n         * 3.3. Matricular\r\n         * \r\n         * Si no hay datos registrados, o no hay estudiantes, o no hay asignaturas, no se puede acceder.\r\n         * \r\n         * En primer lugar se escoge un estudiante de listaEstudiantes. Sólo se podrán escoger aquellos que\r\n         * no estén matriculados de todas las asignaturas.\r\n         * Después, se escogen las asignaturas a matricular.\r\n         */ case 3:\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0 && $d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                window.alert(\"No existen datos registrados.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0) {\n                window.alert(\"No existen estudiantes registrados.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                window.alert(\"No existen asignaturas registradas.\");\n                break;\n            }\n            do {\n                console.clear();\n                console.log(\"Matricular \\u270D\", \"titulo\");\n                console.log(\"Seleccionar Estudiante \\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"subtitulo\");\n                for (const estudiante of $d7137dbc75aee9e1$var$listaEstudiantes.lista)if (estudiante.asignaturas.length != $d7137dbc75aee9e1$var$listaAsignaturas.lista.length) console.log($d7137dbc75aee9e1$var$listaEstudiantes.lista.indexOf(estudiante) + 1 + \". \" + estudiante.toString(), \"boton\");\n                else console.log($d7137dbc75aee9e1$var$listaEstudiantes.lista.indexOf(estudiante) + 1 + \". \" + estudiante.toString(), \"boton\", \"text-decoration: line-through;\");\n                console.log(\"0. \\u23EA Volver\", \"boton\");\n                do {\n                    $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Escoja un estudiante:\"));\n                    if (Number.isNaN($d7137dbc75aee9e1$var$eleccion)) $d7137dbc75aee9e1$var$eleccion = -1;\n                }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > $d7137dbc75aee9e1$var$listaEstudiantes.lista.length);\n                if ($d7137dbc75aee9e1$var$eleccion == 0) break;\n                const estudiante = $d7137dbc75aee9e1$var$listaEstudiantes.lista[$d7137dbc75aee9e1$var$eleccion - 1];\n                if (estudiante.asignaturas.length == $d7137dbc75aee9e1$var$listaAsignaturas.lista.length) {\n                    window.alert(\"El estudiante ya est\\xe1 cursando todas las asignaturas.\");\n                    $d7137dbc75aee9e1$var$eleccion = -1;\n                    continue;\n                }\n                let asignaturasSeleccionadas = [];\n                let volverMenuEstudiantes = false;\n                const asignaturasMatriculadas = estudiante.asignaturas.map((a)=>a[0].nombre);\n                const asignaturasDisponibles = $d7137dbc75aee9e1$var$listaAsignaturas.lista.filter((a)=>!asignaturasMatriculadas.includes(a.nombre));\n                do {\n                    console.clear();\n                    console.log(\"Matricular \\u270D\", \"titulo\");\n                    console.log(\"Estudiante: \" + estudiante.toString());\n                    console.log(\"Seleccionar Asignaturas \\uD83D\\uDCDA\", \"subtitulo\");\n                    let textoSeleccionadas = \"Seleccionadas (\" + asignaturasSeleccionadas.length + \")\";\n                    if (asignaturasSeleccionadas.length > 0) textoSeleccionadas += \": \" + asignaturasSeleccionadas.map((a)=>a.nombre).join(\", \");\n                    console.log(textoSeleccionadas);\n                    for (const asignatura of asignaturasDisponibles){\n                        const seleccionada = asignaturasSeleccionadas.includes(asignatura) ? \"\\u274E\" : \"\\u2B1B\";\n                        console.log(seleccionada + \" \" + (asignaturasDisponibles.indexOf(asignatura) + 1) + \". \" + asignatura.toString(), \"boton\");\n                    }\n                    console.log(\"0. \\u23EA Volver\", \"boton\");\n                    $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Escoja una o m\\xe1s asignaturas:\\n(Pulse solamente Enter para finalizar)\");\n                    $d7137dbc75aee9e1$var$eleccion = Number.parseInt($d7137dbc75aee9e1$var$eleccion);\n                    if (Number.isNaN($d7137dbc75aee9e1$var$eleccion)) $d7137dbc75aee9e1$var$eleccion = -1;\n                    if ($d7137dbc75aee9e1$var$eleccion == 0) {\n                        volverMenuEstudiantes = true;\n                        $d7137dbc75aee9e1$var$eleccion = -1;\n                        break;\n                    } else if ($d7137dbc75aee9e1$var$eleccion > 0 && $d7137dbc75aee9e1$var$eleccion <= asignaturasDisponibles.length) {\n                        const asignatura = asignaturasDisponibles[$d7137dbc75aee9e1$var$eleccion - 1];\n                        if (asignaturasSeleccionadas.includes(asignatura)) asignaturasSeleccionadas = asignaturasSeleccionadas.filter((a)=>a != asignatura);\n                        else asignaturasSeleccionadas.push(asignatura);\n                    } else if (asignaturasSeleccionadas.length > 0 && !volverMenuEstudiantes) {\n                        estudiante.matricular(...asignaturasSeleccionadas);\n                        console.clear();\n                        console.log(\"Matricular \\u270D\", \"titulo\");\n                        console.log(\"Matr\\xedcula Terminada \\u2705\", \"subtitulo\");\n                        console.log(\"Estudiante: \" + estudiante.toString());\n                        console.log(\"Asignaturas (\" + asignaturasSeleccionadas.length + \"): \" + asignaturasSeleccionadas.map((a)=>a.toString()).join(\", \"));\n                        window.alert(\"Estudiante matriculado correctamente\");\n                        $d7137dbc75aee9e1$var$eleccion = 0;\n                        break;\n                    } else window.alert(\"Debe seleccionar al menos una asignatura.\");\n                }while (true);\n            }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > $d7137dbc75aee9e1$var$listaEstudiantes.lista.length);\n            break;\n        /**\r\n         * 3.4. Desmatricular\r\n         * \r\n         * Si no existen datos, asignaturas, o estudiantes matriculados de al menos una asignatura, no se\r\n         * puede acceder.\r\n         * \r\n         * En primer lugar, se escoge un estudiante de entre los matriculados en al menos una asignatura.\r\n         * Después,\r\n         * se seleccionan las asignaturas a desmatricular.\r\n         */ case 4:\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0 && $d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                window.alert(\"No existen datos registrados.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0) {\n                window.alert(\"No existen estudiantes registrados.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                window.alert(\"No existen asignaturas registradas.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.every((e)=>e.asignaturas.length == 0)) {\n                window.alert(\"No existen estudiantes matriculados.\");\n                break;\n            }\n            const listaMatriculados = $d7137dbc75aee9e1$var$listaEstudiantes.lista.filter((e)=>e.asignaturas.length > 0);\n            do {\n                console.clear();\n                console.log(\"Desmatricular \\uD83D\\uDCE4\", \"titulo\");\n                console.log(\"Seleccionar Estudiante \\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"subtitulo\");\n                for (const estudiante of listaMatriculados)console.log(listaMatriculados.indexOf(estudiante) + 1 + \". \" + estudiante.toString(), \"boton\");\n                console.log(\"0. \\u23EA Volver\", \"boton\");\n                do {\n                    $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Escoja un estudiante:\"));\n                    if (Number.isNaN($d7137dbc75aee9e1$var$eleccion)) $d7137dbc75aee9e1$var$eleccion = -1;\n                }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > listaMatriculados.length);\n                if ($d7137dbc75aee9e1$var$eleccion == 0) break;\n                const estudiante = listaMatriculados[$d7137dbc75aee9e1$var$eleccion - 1];\n                let asignaturasSeleccionadas = [];\n                let volverMenuEstudiantes = false;\n                do {\n                    console.clear();\n                    console.log(\"Desmatricular \\uD83D\\uDCE4\", \"titulo\");\n                    console.log(\"Seleccionar Asignaturas \\uD83D\\uDCDA\", \"subtitulo\");\n                    let textoSeleccionadas = \"Seleccionadas (\" + asignaturasSeleccionadas.length + \")\";\n                    if (asignaturasSeleccionadas.length > 0) textoSeleccionadas += \": \" + asignaturasSeleccionadas.map((a)=>a.nombre).join(\", \");\n                    console.log(textoSeleccionadas);\n                    for (const asignatura of estudiante.asignaturas){\n                        const seleccionada = asignaturasSeleccionadas.includes(asignatura[0]) ? \"\\u274E\" : \"\\u2B1B\";\n                        console.log(seleccionada + \" \" + (estudiante.asignaturas.indexOf(asignatura) + 1) + \". \" + asignatura[0].toString(), \"boton\");\n                    }\n                    console.log(\"0. \\u23EA Volver\", \"boton\");\n                    $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Escoja una o m\\xe1s asignaturas:\\n(Pulse solamente Enter para finalizar)\");\n                    $d7137dbc75aee9e1$var$eleccion = Number.parseInt($d7137dbc75aee9e1$var$eleccion);\n                    if (Number.isNaN($d7137dbc75aee9e1$var$eleccion)) $d7137dbc75aee9e1$var$eleccion = -1;\n                    if ($d7137dbc75aee9e1$var$eleccion == 0) {\n                        volverMenuEstudiantes = true;\n                        $d7137dbc75aee9e1$var$eleccion = -1;\n                        break;\n                    } else if ($d7137dbc75aee9e1$var$eleccion > 0 && $d7137dbc75aee9e1$var$eleccion <= estudiante.asignaturas.length) {\n                        const asignatura = estudiante.asignaturas[$d7137dbc75aee9e1$var$eleccion - 1][0];\n                        if (asignaturasSeleccionadas.includes(asignatura)) asignaturasSeleccionadas = asignaturasSeleccionadas.filter((a)=>a != asignatura);\n                        else asignaturasSeleccionadas.push(asignatura);\n                    } else if (asignaturasSeleccionadas.length > 0 && !volverMenuEstudiantes) {\n                        estudiante.desmatricular(...asignaturasSeleccionadas);\n                        console.clear();\n                        console.log(\"Desmatricular \\uD83D\\uDCE4\", \"titulo\");\n                        console.log(\"Desmatr\\xedcula Terminada \\u2705\", \"subtitulo\");\n                        console.log(\"Estudiante: \" + estudiante.toString());\n                        console.log(\"Asignaturas (\" + asignaturasSeleccionadas.length + \"): \" + asignaturasSeleccionadas.map((a)=>a.toString()).join(\", \"));\n                        window.alert(\"Estudiante desmatriculado correctamente.\");\n                        $d7137dbc75aee9e1$var$eleccion = 0;\n                        break;\n                    } else window.alert(\"Debe seleccionar al menos una asignatura.\");\n                }while (true);\n            }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > listaMatriculados.length);\n            break;\n        /**\r\n         * 3.5. Registro de Auditoría\r\n         * \r\n         * Si no existen datos, estudiantes o asignaturas, no se puede acceder.\r\n         * \r\n         * Se escoge el estudiante para obtener sus registros y se muestran.\r\n         */ case 5:\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0 && $d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                window.alert(\"No existen datos registrados.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0) {\n                window.alert(\"No existen estudiantes registrados.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                window.alert(\"No existen asignaturas registradas.\");\n                break;\n            }\n            do {\n                console.clear();\n                console.log(\"Registro de Auditor\\xeda \\uD83D\\uDCCB\", \"titulo\");\n                console.log(\"Seleccionar Estudiante \\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"subtitulo\");\n                for (const estudiante of $d7137dbc75aee9e1$var$listaEstudiantes.lista)console.log($d7137dbc75aee9e1$var$listaEstudiantes.lista.indexOf(estudiante) + 1 + \". \" + estudiante.toString(), \"boton\");\n                console.log(\"0. \\u23EA Volver\", \"boton\");\n                do {\n                    $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Escoja un estudiante:\"));\n                    if (Number.isNaN($d7137dbc75aee9e1$var$eleccion)) $d7137dbc75aee9e1$var$eleccion = -1;\n                }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > $d7137dbc75aee9e1$var$listaEstudiantes.lista.length);\n                if ($d7137dbc75aee9e1$var$eleccion == 0) break;\n                const estudiante = $d7137dbc75aee9e1$var$listaEstudiantes.lista[$d7137dbc75aee9e1$var$eleccion - 1];\n                console.clear();\n                console.log(\"Registro de Auditor\\xeda \\uD83D\\uDCCB\", \"titulo\");\n                console.log(estudiante.nombre + \" \\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"subtitulo\");\n                let estilo = \"border-radius: 5px;\";\n                estilo += \"margin: 5px;\";\n                estilo += \"border: 2px solid lightgray;\";\n                estilo += \"background-color: black;\";\n                estilo += \"color: white;\";\n                if (estudiante.registros.length == 0) console.log(\"No existen registros.\", estilo, \"font-family: 'consolas', 'sans-serif';\");\n                else for (const registro of estudiante.registros)console.log(registro, estilo, \"font-family: 'consolas', 'sans-serif';\");\n                window.alert(\"Acepte para volver.\");\n            }while ($d7137dbc75aee9e1$var$eleccion != 0);\n            break;\n        /**\r\n         * 3.6. Calificar\r\n         * \r\n         * Si no existen datos, asignaturas, o estudiantes matriculados de al menos una asignatura, no se \r\n         * puede acceder.\r\n         * \r\n         * En primer lugar, se escoge entre los estudiantes matriculados de al menos una asignatura.\r\n         * Después, se escoge la asignatura a calificar entre las asignaturas de las cuales el estudiante\r\n         * está matriculado. Si dicha asignatura ya está calificada, se emitirá una advertencia sobre la\r\n         * sobreescritura de la nota.\r\n         * Finalmente, se pide una nota entre 0 y 10 y se califica al estudiante con dichos parámetros.\r\n         */ case 6:\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0 && $d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                window.alert(\"No existen datos registrados.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0) {\n                window.alert(\"No existen estudiantes registrados.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                window.alert(\"No existen asignaturas registradas.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.every((e)=>e.asignaturas.length == 0)) {\n                window.alert(\"No existen estudiantes matriculados.\");\n                break;\n            }\n            const matriculados = $d7137dbc75aee9e1$var$listaEstudiantes.lista.filter((e)=>e.asignaturas.length > 0);\n            do {\n                console.clear();\n                console.log(\"Calificar \\uD83D\\uDD22\", \"titulo\");\n                console.log(\"Seleccionar Estudiante \\uD83D\\uDC68\\u200D\\uD83C\\uDF93\", \"subtitulo\");\n                for (const estudiante of matriculados)console.log(matriculados.indexOf(estudiante) + 1 + \". \" + estudiante.toString(), \"boton\");\n                console.log(\"0. \\u23EA Volver\", \"boton\");\n                do {\n                    $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Escoja un estudiante:\"));\n                    if (Number.isNaN($d7137dbc75aee9e1$var$eleccion)) $d7137dbc75aee9e1$var$eleccion = -1;\n                }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > matriculados.length);\n                if ($d7137dbc75aee9e1$var$eleccion == 0) break;\n                const estudiante = matriculados[$d7137dbc75aee9e1$var$eleccion - 1];\n                do {\n                    console.clear();\n                    console.log(\"Calificar \\uD83D\\uDD22\", \"titulo\");\n                    console.log(\"Estudiante: \" + estudiante.toString());\n                    console.log(\"Seleccionar Asignatura \\uD83D\\uDCD5\", \"subtitulo\");\n                    for (const asignatura of estudiante.asignaturas){\n                        let resultado = estudiante.asignaturas.indexOf(asignatura) + 1 + \". \" + asignatura[0].toString();\n                        if (typeof asignatura[1] != \"string\") resultado += \" (\" + asignatura[1].toFixed(2) + \")\";\n                        console.log(resultado, \"boton\");\n                    }\n                    console.log(\"0. \\u23EA Volver\", \"boton\");\n                    let valorNota;\n                    let sobreescritura = false;\n                    let asignatura;\n                    do {\n                        $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Escoja una asignatura:\"));\n                        if (Number.isNaN($d7137dbc75aee9e1$var$eleccion)) $d7137dbc75aee9e1$var$eleccion = -1;\n                        else if ($d7137dbc75aee9e1$var$eleccion > 0 && $d7137dbc75aee9e1$var$eleccion <= estudiante.asignaturas.length) {\n                            valorNota = estudiante.asignaturas[$d7137dbc75aee9e1$var$eleccion - 1][1];\n                            if (typeof valorNota != \"string\") {\n                                if (window.confirm(\"\\xbfSeguro que quiere sobreescribir la nota anterior (\" + valorNota.toFixed(2) + \")?\")) {\n                                    sobreescritura = true;\n                                    asignatura = estudiante.asignaturas[$d7137dbc75aee9e1$var$eleccion - 1][0];\n                                    try {\n                                        asignatura.eliminarCalificacion(valorNota);\n                                    } catch (error) {\n                                        window.alert(error);\n                                    }\n                                } else $d7137dbc75aee9e1$var$eleccion = -1;\n                            }\n                        }\n                    }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > estudiante.asignaturas.length);\n                    if ($d7137dbc75aee9e1$var$eleccion == 0) {\n                        $d7137dbc75aee9e1$var$eleccion = -1;\n                        break;\n                    }\n                    if (!sobreescritura) asignatura = estudiante.asignaturas[$d7137dbc75aee9e1$var$eleccion - 1][0];\n                    console.clear();\n                    console.log(\"Calificar \\uD83D\\uDD22\", \"titulo\");\n                    console.log(\"Poner Nota \\u270D\", \"subtitulo\");\n                    console.log(\"Estudiante: \" + estudiante.toString());\n                    console.log(\"Asignatura: \" + asignatura.toString());\n                    console.log(\"Nota: \");\n                    do {\n                        $d7137dbc75aee9e1$var$eleccion = Number.parseFloat(window.prompt(\"Nota:\"));\n                        if (Number.isNaN($d7137dbc75aee9e1$var$eleccion) || $d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > 10) $d7137dbc75aee9e1$var$eleccion = -1;\n                        else $d7137dbc75aee9e1$var$eleccion = $d7137dbc75aee9e1$var$eleccion.toFixed(2);\n                    }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > 10);\n                    const nota = $d7137dbc75aee9e1$var$eleccion;\n                    try {\n                        estudiante.calificar(asignatura, nota);\n                        console.clear();\n                        console.log(\"Calificar \\uD83D\\uDD22\", \"titulo\");\n                        console.log(\"Estudiante Calificado \\u2705\", \"subtitulo\");\n                        console.log(\"Estudiante: \" + estudiante.toString());\n                        console.log(\"Asignatura: \" + asignatura.toString());\n                        console.log(\"Nota: \" + nota);\n                        window.alert(\"Estudiante calificado correctamente.\");\n                        $d7137dbc75aee9e1$var$eleccion = 0;\n                    } catch (error) {\n                        window.alert(error);\n                    }\n                }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > estudiante.asignaturas.length);\n            }while ($d7137dbc75aee9e1$var$eleccion < 0 || $d7137dbc75aee9e1$var$eleccion > $d7137dbc75aee9e1$var$listaEstudiantes.lista.length);\n            break;\n        /**\r\n         * 3.7. Buscar\r\n         * \r\n         * Si no existen datos, estudiantes o asignaturas, no se puede acceder.\r\n         */ case 7:\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0 && $d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                window.alert(\"No existen datos registrados.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0) {\n                window.alert(\"No existen estudiantes registrados.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                window.alert(\"No existen asignaturas registradas.\");\n                break;\n            }\n            do {\n                console.clear();\n                console.log(\"Buscar \\uD83D\\uDD0E\", \"titulo\");\n                console.log(\"1. \\uD83C\\uDF93 Estudiantes\", \"boton\");\n                console.log(\"2. \\uD83D\\uDCDA Asignaturas\", \"boton\");\n                console.log(\"0. \\u23EA Volver\", \"boton\");\n                $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Elecci\\xf3n:\"));\n                console.clear();\n                switch($d7137dbc75aee9e1$var$eleccion){\n                    /**\r\n                     * 3.7.1. Buscar Estudiantes\r\n                     * \r\n                     * Al principio, se muestran todos los estudiantes de listaEstudiantes.\r\n                     * Se introduce un texto y se muestran las coincidencias de los estudiantes cuyo nombre\r\n                     * incluya dicho texto.\r\n                     */ case 1:\n                        console.log(\"Buscar Estudiantes \\uD83D\\uDD0E\\uD83C\\uDF93\", \"titulo\");\n                        console.log(\"Lista de Estudiantes\", \"subtitulo\");\n                        for (const estudiante of $d7137dbc75aee9e1$var$listaEstudiantes.lista)console.log(estudiante.toString(), \"boton\");\n                        do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Introduzca el nombre del estudiante:\");\n                        while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() == \"\" || !$d7137dbc75aee9e1$var$eleccion.match(/^[a-zA-ZáéíóúüÁÉÍÓÚÜ ]+$/));\n                        const resultadosEstudiantes = $d7137dbc75aee9e1$var$listaEstudiantes.busquedaEstudiantes($d7137dbc75aee9e1$var$eleccion);\n                        console.clear();\n                        console.log(\"Buscar Estudiantes \\uD83D\\uDD0E\\uD83C\\uDF93\", \"titulo\");\n                        console.log(\"Resultados (\" + resultadosEstudiantes.length + \"): \\\"\" + $d7137dbc75aee9e1$var$eleccion + \"\\\"\", \"subtitulo\");\n                        if (resultadosEstudiantes.length == 0) {\n                            window.alert(\"No se ha encontrado ning\\xfan resultado.\");\n                            break;\n                        }\n                        for (const estudiante of resultadosEstudiantes)console.log(estudiante.toString(), \"boton\");\n                        window.alert(\"Acepte para volver.\");\n                        $d7137dbc75aee9e1$var$eleccion = 0;\n                        break;\n                    /**\r\n                     * 3.7.2. Buscar Asignaturas\r\n                     *\r\n                     * Al principio, se muestran todos las asignaturas de listaAsignaturas.\r\n                     * Se introduce un texto y se muestran las coincidencias de las asignaturas cuyo nombre\r\n                     * incluya dicho texto.\r\n                     */ case 2:\n                        console.log(\"Buscar Asignaturas \\uD83D\\uDD0E\\uD83D\\uDCDA\", \"titulo\");\n                        console.log(\"Lista de Asignaturas\", \"subtitulo\");\n                        for (const asignatura of $d7137dbc75aee9e1$var$listaAsignaturas.lista)console.log(asignatura.toString(), \"boton\");\n                        do $d7137dbc75aee9e1$var$eleccion = window.prompt(\"Introduzca el nombre de la asignatura:\");\n                        while (!$d7137dbc75aee9e1$var$eleccion || $d7137dbc75aee9e1$var$eleccion.trim() == \"\" || !$d7137dbc75aee9e1$var$eleccion.match(/^[a-zA-ZáéíóúüÁÉÍÓÚÜ ]+$/));\n                        const resultadosAsignaturas = $d7137dbc75aee9e1$var$listaAsignaturas.busquedaAsignaturas($d7137dbc75aee9e1$var$eleccion);\n                        console.clear();\n                        console.log(\"Buscar Asignaturas \\uD83D\\uDD0E\\uD83D\\uDCDA\", \"titulo\");\n                        console.log(\"Resultados (\" + resultadosAsignaturas.length + \"): \\\"\" + $d7137dbc75aee9e1$var$eleccion + \"\\\"\", \"subtitulo\");\n                        if (resultadosAsignaturas.length == 0) {\n                            window.alert(\"No se ha encontrado ninguna asignatura.\");\n                            break;\n                        }\n                        for (const estudiante of resultadosAsignaturas)console.log(estudiante.toString(), \"boton\");\n                        window.alert(\"Acepte para volver.\");\n                        $d7137dbc75aee9e1$var$eleccion = 0;\n                        break;\n                }\n            }while ($d7137dbc75aee9e1$var$eleccion != 0);\n            break;\n        /**\r\n         * 3.8. Calcular Promedio\r\n         * \r\n         * Si no existen datos, estudiantes o asignaturas, no se puede acceder.\r\n         */ case 8:\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0 && $d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                window.alert(\"No existen datos registrados.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0) {\n                window.alert(\"No existen estudiantes registrados.\");\n                break;\n            }\n            if ($d7137dbc75aee9e1$var$listaAsignaturas.lista.length == 0) {\n                window.alert(\"No existen asignaturas registradas.\");\n                break;\n            }\n            do {\n                console.clear();\n                console.log(\"Calcular Promedio \\uD83D\\uDCB0\", \"titulo\");\n                console.log(\"1. \\uD83C\\uDF0D General\", \"boton\");\n                console.log(\"2. \\uD83D\\uDCDA Asignaturas\", \"boton\");\n                console.log(\"0. \\u23EA Volver\", \"boton\");\n                $d7137dbc75aee9e1$var$eleccion = Number.parseInt(window.prompt(\"Elecci\\xf3n:\"));\n                console.clear();\n                switch($d7137dbc75aee9e1$var$eleccion){\n                    /**\r\n                     * 3.8.1. Promedio General\r\n                     * \r\n                     * Muestra el promedio de los promedios de los estudiantes (promedio general) y una de los promedios\r\n                     * de cada estudiante.\r\n                     */ case 1:\n                        console.log(\"Calcular Promedio \\uD83D\\uDCB0\\uD83C\\uDF0D\", \"titulo\");\n                        console.log(\"Promedio General: \" + $d7137dbc75aee9e1$var$listaEstudiantes.promedioGeneral, \"subtitulo\");\n                        for (const estudiante of $d7137dbc75aee9e1$var$listaEstudiantes.lista)console.log(estudiante.nombre + \": \" + estudiante.promedio);\n                        window.alert(\"Acepte para volver.\");\n                        $d7137dbc75aee9e1$var$eleccion = 0;\n                        break;\n                    /**\r\n                     * 3.8.2. Promedio por Asignaturas\r\n                     * \r\n                     * Muestra el promedio en una asignatura de las notas de todos los estudiantes matriculados en ella.\r\n                     */ case 2:\n                        console.log(\"Calcular Promedio \\uD83D\\uDCB0\", \"titulo\");\n                        console.log(\"Lista de Asignaturas \\uD83D\\uDCDA\", \"subtitulo\");\n                        for (const asignatura of $d7137dbc75aee9e1$var$listaAsignaturas.lista)console.log(asignatura.nombre + \": \" + asignatura.promedio);\n                        window.alert(\"Acepte para volver.\");\n                        $d7137dbc75aee9e1$var$eleccion = 0;\n                        break;\n                }\n            }while ($d7137dbc75aee9e1$var$eleccion != 0);\n            break;\n        /**\r\n         * 3.9. Mostrar Reporte\r\n         * \r\n         * Muestra el reporte de todos los estudiantes y su información, tanto datos personales (nombre, edad y dirección)\r\n         * como calificaciones (asignaturas y promedio).\r\n         */ case 9:\n            if ($d7137dbc75aee9e1$var$listaEstudiantes.lista.length == 0) {\n                window.alert(\"No existen estudiantes registrados.\");\n                break;\n            }\n            console.clear();\n            console.log(\"Reporte de Estudiantes (\" + $d7137dbc75aee9e1$var$listaEstudiantes.lista.length + \") \\uD83E\\uDDFE\", \"titulo\");\n            $d7137dbc75aee9e1$var$listaEstudiantes.mostrarReporte();\n            window.alert(\"Acepte para volver.\");\n            break;\n    }\n}\n\n\n//# sourceMappingURL=index.c715306c.js.map\n","/**\r\n * @file main.js\r\n * @author Alonso Hernández Robles\r\n * @fileoverview Programa Principal de SGAEA. _(Tarea 4.5)_\r\n */\r\n\r\n/** \r\n ╭--------------------------------------------------------------------------------------------------------------------------------------╮\r\n | SGAEA - Sistema de Gestión Académica de Estudiantes y Asignaturas                                                                    |\r\n | Alonso Hernández Robles 2º DAW AULA                                                                                                  |\r\n |                                                                                                                                      |\r\n | Github Pages: https://aloncraftmc.github.io/DWEC_VIEW_HernandezRobles_Alonso/SGAEA/Original%20(1%C2%AA%20Evaluaci%C3%B3n)/index.html |\r\n | (Es necesario abrir la consola de las DevTools antes de cargar la página)                                                            |\r\n ╰--------------------------------------------------------------------------------------------------------------------------------------╯\r\n */\r\n\r\n/**\r\n * 1. Redefinición de console.log() y console.groupCollapsed()\r\n * \r\n * En esta sección se redefinen los métodos console.log() y console.groupCollapsed() para aplicar estilos a los textos en función de su finalidad.\r\n * \r\n * console.log() hace uso de estilos asemejados a botones, títulos y subtítulos.\r\n * console.groupCollapsed() hace uso de estilos asemejados a botones y subtítulos.\r\n * Este método muestra los elementos console.log() que tenga anidados dentro, similar a un <details>.\r\n * \r\n * Por defecto, los métodos mostrarán un texto con la fuente 'Rubik', importada desde la etiqueta <style> de index.html.\r\n */\r\n\r\n/**\r\n * @global\r\n * @constant\r\n * @type {Function}\r\n * @description **Función original** de `console.log()`.\r\n */\r\nconst defaultConsoleLog = console.log;\r\n\r\nconsole.log = (texto, estilos = \"\", otrosEstilos = \"\") => {\r\n    \r\n    texto = \"%c\" + texto;\r\n\r\n    switch(estilos){\r\n\r\n        case \"boton\":\r\n            estilos = \"padding: 10px;\";\r\n            estilos += \"border: 5px solid gray;\";\r\n            estilos += \"border-radius: 10px;\";\r\n            estilos += \"background-color: white;\";\r\n            estilos += \"color: black;\";\r\n            estilos += \"font-size: 20px;\";\r\n            estilos += \"margin: 5px;\";\r\n            break;\r\n\r\n        case \"titulo\":\r\n            estilos = \"font-size: 50px;\";\r\n            estilos += \"margin: 5px;\";\r\n            break;\r\n\r\n        case \"subtitulo\":\r\n            estilos = \"font-size: 30px;\"\r\n            estilos += \"color: #BBBBBB;\";\r\n            estilos += \"padding: 2px;\";\r\n            break;\r\n\r\n        default:\r\n            estilos += \"font-size: 20px;\";\r\n            estilos += \"padding: 10px;\";\r\n            break;\r\n\r\n    }\r\n\r\n    estilos += \"font-family: Rubik, sans-serif;\" + otrosEstilos;\r\n    defaultConsoleLog.call(console, texto, estilos);\r\n\r\n};\r\n\r\n/**\r\n * @global\r\n * @constant\r\n * @type {Function}\r\n * @description **Función original** de `console.groupCollapsed()`.\r\n */\r\nconst defaultConsoleGroupCollapsed = console.groupCollapsed;\r\n\r\nconsole.groupCollapsed = (texto, estilos = \"\") => {\r\n    \r\n    texto = \"%c\" + texto;\r\n\r\n    switch(estilos){\r\n\r\n        case \"boton\":\r\n            estilos = \"padding: 10px;\";\r\n            estilos += \"border: 5px solid gray;\";\r\n            estilos += \"border-radius: 10px;\";\r\n            estilos += \"background-color: white;\";\r\n            estilos += \"color: black;\";\r\n            estilos += \"font-size: 30px;\";\r\n            estilos += \"margin: 5px;\";\r\n            break;\r\n\r\n        case \"subtitulo\":\r\n            estilos = \"font-size: 30px;\"\r\n            estilos += \"padding: 10px;\";\r\n            break;\r\n\r\n        default:\r\n            estilos += \"font-size: 20px;\";\r\n            estilos += \"padding: 10px;\";\r\n            break;\r\n\r\n    }\r\n\r\n    estilos += \"font-family: 'Rubik', sans-serif; font-weight: normal;\";\r\n    defaultConsoleGroupCollapsed.call(console, texto, estilos);\r\n\r\n};\r\n\r\n/**\r\n * 2. Definición de Clases\r\n * \r\n * En esta parte se importan las clases Direccion, Estudiante, Asignatura, ListaEstudiantes y ListaAsignaturas.\r\n * Todas las clases están en sus respecitivos archivos.\r\n */\r\n\r\nimport { Direccion } from \"./direccion.js\";\r\nimport { Estudiante } from \"./estudiante.js\";\r\nimport { Asignatura } from \"./asignatura.js\";\r\nimport { ListaEstudiantes } from \"./listaEstudiantes.js\";\r\nimport { ListaAsignaturas } from \"./listaAsignaturas.js\";\r\n\r\n/**\r\n * 3. Programa Principal.\r\n * \r\n * En esta sección se declara un objeto ListaEstudiantes, otro objeto ListaAsignaturas, y un Array de objetos\r\n * Direccion llamado listaDirecciones. Seguidamente, se entra en el bucle while.\r\n * \r\n * Extra: Se inicializan y añaden 5 direcciones, 5 estudiantes y 5 asignaturas.\r\n *        Se matriculan a algunos estudiantes de algunas asignaturas.\r\n *        Se desmatriculan a algunos estudiantes de algunas asignaturas.\r\n *        Se califican a algunos estudiantes en algunas asignaturas.\r\n * \r\n * Por siempre, se preguntará la elección principal de la acción a realizar.\r\n * La variable eleccion será la variable que siempre obtenga el valor de window.prompt().\r\n */\r\n\r\n/**\r\n * @global\r\n * @constant\r\n * @type {ListaEstudiantes} \r\n * @description **Lista** de **estudiantes**.\r\n * @see ListaEstudiantes\r\n */\r\nconst listaEstudiantes = new ListaEstudiantes();\r\n\r\n/**\r\n * @global\r\n * @constant\r\n * @type {ListaAsignaturas} \r\n * @description **Lista** de **asignaturas**.\r\n * @see ListaAsignaturas\r\n */\r\nconst listaAsignaturas = new ListaAsignaturas();\r\n\r\n/**\r\n * @global\r\n * @type {Direccion[]}\r\n * @description Lista de **direcciones**.\r\n * @see Direccion\r\n */\r\nlet listaDirecciones = [];\r\n\r\n/**\r\n * @global\r\n * @type {Number}\r\n * @description **Elección** de la acción a realizar.\r\n */\r\nlet eleccion;\r\n\r\n// Creación de Direcciones\r\n\r\nlistaDirecciones.push(new Direccion(\"C/ Afán de Ribera\", 15, \"2ºA\", 18005, \"Granada\", \"Granada\"));\r\nlistaDirecciones.push(new Direccion(\"C/ Aliatar\", 17, \"Piso Bajo\", 18110, \"Granada\", \"Híjar\"));\r\nlistaDirecciones.push(new Direccion(\"C/ Canalejas\", 5, \"2ºB\", 23790, \"Jaén\", \"Porcuna\"));\r\nlistaDirecciones.push(new Direccion(\"C/ Paraguay\", 1, \"Piso Bajo\", 18210, \"Granada\", \"Peligros\"));\r\nlistaDirecciones.push(new Direccion(\"C/ Málaga\", 23, \"5ºC\", 29770, \"Málaga\", \"Torrox\"));\r\n\r\n// Creación de Estudiantes\r\n\r\nlistaEstudiantes.añadirEstudiante(new Estudiante(\"Alonso Hernández Robles\", 21, listaDirecciones[0]));\r\nlistaEstudiantes.añadirEstudiante(new Estudiante(\"Álex Galán Varo\", 20, listaDirecciones[1]));\r\nlistaEstudiantes.añadirEstudiante(new Estudiante(\"Ana Quero de La Rosa\", 19, listaDirecciones[2]));\r\nlistaEstudiantes.añadirEstudiante(new Estudiante(\"Adrián Martín Vázquez\", 19, listaDirecciones[3]));\r\nlistaEstudiantes.añadirEstudiante(new Estudiante(\"Javier Escobar Vela\", 22, listaDirecciones[4]));\r\n\r\n// Creación de Asignaturas\r\n\r\nlistaAsignaturas.añadirAsignatura(new Asignatura(\"DWEC\"));\r\nlistaAsignaturas.añadirAsignatura(new Asignatura(\"DWES\"));\r\nlistaAsignaturas.añadirAsignatura(new Asignatura(\"DEAW\"));\r\nlistaAsignaturas.añadirAsignatura(new Asignatura(\"DIW\"));\r\nlistaAsignaturas.añadirAsignatura(new Asignatura(\"EIE\"));\r\n\r\n// Matriculación de Estudiantes\r\n\r\nlistaEstudiantes.lista[0].matricular(listaAsignaturas.lista[0]);\r\nlistaEstudiantes.lista[0].matricular(listaAsignaturas.lista[1]);\r\nlistaEstudiantes.lista[0].matricular(listaAsignaturas.lista[2]);\r\nlistaEstudiantes.lista[0].matricular(listaAsignaturas.lista[3]);\r\nlistaEstudiantes.lista[0].matricular(listaAsignaturas.lista[4]);\r\n\r\nlistaEstudiantes.lista[1].matricular(listaAsignaturas.lista[0]);\r\nlistaEstudiantes.lista[1].matricular(listaAsignaturas.lista[1]);\r\nlistaEstudiantes.lista[1].matricular(listaAsignaturas.lista[2]);\r\nlistaEstudiantes.lista[1].matricular(listaAsignaturas.lista[3]);\r\n\r\nlistaEstudiantes.lista[2].matricular(listaAsignaturas.lista[1]);\r\nlistaEstudiantes.lista[2].matricular(listaAsignaturas.lista[2]);\r\nlistaEstudiantes.lista[2].matricular(listaAsignaturas.lista[3]);\r\n\r\nlistaEstudiantes.lista[3].matricular(listaAsignaturas.lista[2]);\r\nlistaEstudiantes.lista[3].matricular(listaAsignaturas.lista[3]);\r\nlistaEstudiantes.lista[3].matricular(listaAsignaturas.lista[4]);\r\n\r\n// Desmatriculaciones de Estudiantes\r\n\r\nlistaEstudiantes.lista[0].desmatricular(listaAsignaturas.lista[4]);\r\nlistaEstudiantes.lista[1].desmatricular(listaAsignaturas.lista[2]);\r\nlistaEstudiantes.lista[2].desmatricular(listaAsignaturas.lista[1]);\r\nlistaEstudiantes.lista[3].desmatricular(listaAsignaturas.lista[3]);\r\n\r\n// Calificación de Estudiantes\r\n\r\nlistaEstudiantes.lista[0].calificar(listaAsignaturas.lista[0], 10);\r\nlistaEstudiantes.lista[0].calificar(listaAsignaturas.lista[1], 9.3);\r\nlistaEstudiantes.lista[0].calificar(listaAsignaturas.lista[3], 9);\r\nlistaEstudiantes.lista[1].calificar(listaAsignaturas.lista[1], 9.4);\r\nlistaEstudiantes.lista[2].calificar(listaAsignaturas.lista[2], 8.3);\r\nlistaEstudiantes.lista[2].calificar(listaAsignaturas.lista[3], 8.85);\r\n\r\n// Bucle while\r\n\r\nwhile(true){\r\n\r\n    console.clear();\r\n    console.log(\"SGAEA\", \"titulo\");\r\n    console.log(\"(Sistema de Gestión Académica de Estudiantes y Asignaturas)\", \"subtitulo\");\r\n    console.log(\"1. ➕ Crear...\", \"boton\");\r\n    console.log(\"2. ➖ Eliminar...\", \"boton\");\r\n    console.log(\"3. ✍ Matricular...\", \"boton\");\r\n    console.log(\"4. 📤 Desmatricular...\", \"boton\");\r\n    console.log(\"5. 📋 Registro de Auditoría\", \"boton\");\r\n    console.log(\"6. 🔢 Calificar...\", \"boton\");\r\n    console.log(\"7. 🔎 Buscar...\", \"boton\");\r\n    console.log(\"8. 💰 Calcular Promedio...\", \"boton\");\r\n    console.log(\"9. 🧾 Mostrar Reporte\", \"boton\");\r\n\r\n    eleccion = Number.parseInt(window.prompt(\"Elección:\"));\r\n    \r\n    switch(eleccion){\r\n\r\n        /**\r\n         * 3.1. Crear\r\n         * \r\n         * Siempre se pueden crear direcciones, estudiantes y/o asignaturas.\r\n         */\r\n\r\n        case 1:\r\n\r\n            do{\r\n\r\n                console.clear();\r\n                console.log(\"Crear ➕\", \"titulo\");\r\n                console.log(\"1. 🏠 Dirección\", \"boton\");\r\n                console.log(\"2. 👨‍🎓 Estudiante\", \"boton\");\r\n                console.log(\"3. 📕 Asignatura\", \"boton\");\r\n                console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                eleccion = Number.parseInt(window.prompt(\"Elección:\"));\r\n\r\n                console.clear();\r\n\r\n                switch(eleccion){\r\n\r\n                    /**\r\n                     * 3.1.1. Crear Dirección\r\n                     * \r\n                     * Se pedirá calle, número, piso, código postal, provincia y localidad.\r\n                     * Al crearla, se guardará en el Array listaDirecciones.\r\n                     */\r\n\r\n                    case 1:\r\n\r\n                        console.log(\"Crear Dirección ➕🏠\", \"titulo\");\r\n                        console.log(\"Calle: \");\r\n                        \r\n                        do{\r\n\r\n                            eleccion = window.prompt(\"Calle:\");\r\n\r\n                        }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                        const calle = eleccion;\r\n\r\n                        console.clear();\r\n                        console.log(\"Crear Dirección ➕🏠\", \"titulo\");\r\n                        console.log(\"Calle: \" + calle);\r\n                        console.log(\"Número: \");\r\n\r\n                        do{\r\n\r\n                            eleccion = window.prompt(\"Número:\");\r\n\r\n                        }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                        const numero = eleccion;\r\n\r\n                        console.clear();\r\n                        console.log(\"Crear Dirección ➕🏠\", \"titulo\");\r\n                        console.log(\"Calle: \" + calle);\r\n                        console.log(\"Número: \" + numero);\r\n                        console.log(\"Piso: \");\r\n\r\n                        do{\r\n\r\n                            eleccion = window.prompt(\"Piso:\");\r\n\r\n                        }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                        const piso = eleccion;\r\n\r\n                        console.clear();\r\n                        console.log(\"Crear Dirección ➕🏠\", \"titulo\");\r\n                        console.log(\"Calle: \" + calle);\r\n                        console.log(\"Número: \" + numero);\r\n                        console.log(\"Piso: \" + piso);\r\n                        console.log(\"Código Postal: \");\r\n\r\n                        do{\r\n\r\n                            eleccion = window.prompt(\"Código Postal:\");\r\n\r\n                        }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                        const codigoPostal = eleccion;\r\n\r\n                        console.clear();\r\n                        console.log(\"Crear Dirección ➕🏠\", \"titulo\");\r\n                        console.log(\"Calle: \" + calle);\r\n                        console.log(\"Número: \" + numero);\r\n                        console.log(\"Piso: \" + piso);\r\n                        console.log(\"Código Postal: \" + codigoPostal);\r\n                        console.log(\"Provincia: \");\r\n\r\n                        do{\r\n\r\n                            eleccion = window.prompt(\"Provincia:\");\r\n\r\n                        }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                        const provincia = eleccion;\r\n\r\n                        console.clear();\r\n                        console.log(\"Crear Dirección ➕🏠\", \"titulo\");\r\n                        console.log(\"Calle: \" + calle);\r\n                        console.log(\"Número: \" + numero);\r\n                        console.log(\"Piso: \" + piso);\r\n                        console.log(\"Código Postal: \" + codigoPostal);\r\n                        console.log(\"Provincia: \" + provincia);\r\n                        console.log(\"Localidad: \");\r\n\r\n                        do{\r\n\r\n                            eleccion = window.prompt(\"Localidad:\");\r\n\r\n                        }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                        const localidad = eleccion;\r\n\r\n                        console.clear();\r\n                        console.log(\"Crear Dirección ➕🏠\", \"titulo\");\r\n                        console.log(\"Dirección Creada ✅\", \"subtitulo\");\r\n                        console.log(\"Calle: \" + calle);\r\n                        console.log(\"Número: \" + numero);\r\n                        console.log(\"Piso: \" + piso);\r\n                        console.log(\"Código Postal: \" + codigoPostal);\r\n                        console.log(\"Provincia: \" + provincia);\r\n                        console.log(\"Localidad: \" + localidad);\r\n\r\n                        window.alert(\"Dirección creada correctamente.\");\r\n\r\n                        listaDirecciones.push(new Direccion(calle, numero, piso, codigoPostal, provincia, localidad));\r\n\r\n                        eleccion = 0;\r\n                        break;\r\n\r\n                    /**\r\n                     * 3.1.2. Crear Estudiante\r\n                     * \r\n                     * Si el Array listaDirecciones no está vacío, se pedirá si se quiere usar una dirección.\r\n                     * Si no, se pedirá calle, número, piso, código postal, provincia y localidad y se\r\n                     * preguntará si se quiere guardar la dirección en el Array listaDirecciones.\r\n                     * \r\n                     * Se pedirá nombre y edad, y se creará el estudiante.\r\n                     */\r\n\r\n                    case 2:\r\n\r\n                        console.log(\"Crear Estudiante ➕👨‍🎓\", \"titulo\");\r\n\r\n                        let direccion;\r\n\r\n                        if(listaDirecciones.length > 0 && window.confirm(\"¿Desea elegir una dirección ya creada?\")){\r\n\r\n                            console.clear();\r\n                            console.log(\"Crear Estudiante ➕👨‍🎓\", \"titulo\");\r\n                            console.log(\"Seleccionar Dirección 🏠\", \"subtitulo\");\r\n\r\n                            for(const dir of listaDirecciones){\r\n\r\n                                console.log((listaDirecciones.indexOf(dir) + 1) + \". \" + dir.toString(), \"boton\");\r\n\r\n                            }\r\n\r\n                            console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                            do{\r\n\r\n                                eleccion = Number.parseInt(window.prompt(\"Escoja una dirección:\"));\r\n                                \r\n                                if(Number.isNaN(eleccion)) eleccion = -1;\r\n\r\n                            }while(eleccion < 0 || eleccion > listaDirecciones.length);\r\n\r\n                            if(eleccion == 0){\r\n                                eleccion = -1;\r\n                                break;\r\n                            }\r\n\r\n                            direccion = listaDirecciones[eleccion - 1];\r\n\r\n                        }else{\r\n\r\n                            console.clear();\r\n                            console.log(\"Crear Estudiante ➕👨‍🎓\", \"titulo\");\r\n                            console.log(\"Establecer Dirección 🏠\", \"subtitulo\");\r\n                            console.log(\"Calle: \");\r\n                            \r\n                            do{\r\n\r\n                                eleccion = window.prompt(\"Calle:\");\r\n\r\n                            }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                            const calle = eleccion;\r\n\r\n                            console.clear();\r\n                            console.log(\"Crear Estudiante ➕👨‍🎓\", \"titulo\");\r\n                            console.log(\"Establecer Dirección 🏠\", \"subtitulo\");\r\n                            console.log(\"Calle: \" + calle);\r\n                            console.log(\"Número: \");\r\n    \r\n                            do{\r\n\r\n                                eleccion = window.prompt(\"Número:\");\r\n\r\n                            }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                            const numero = eleccion;\r\n\r\n                            console.clear();\r\n                            console.log(\"Crear Estudiante ➕👨‍🎓\", \"titulo\");\r\n                            console.log(\"Establecer Dirección 🏠\", \"subtitulo\");\r\n                            console.log(\"Calle: \" + calle);\r\n                            console.log(\"Número: \" + numero);\r\n                            console.log(\"Piso: \");\r\n    \r\n                            do{\r\n\r\n                                eleccion = window.prompt(\"Piso:\");\r\n\r\n                            }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                            const piso = eleccion;\r\n\r\n                            console.clear();\r\n                            console.log(\"Crear Estudiante ➕👨‍🎓\", \"titulo\");\r\n                            console.log(\"Establecer Dirección 🏠\", \"subtitulo\");\r\n                            console.log(\"Calle: \" + calle);\r\n                            console.log(\"Número: \" + numero);\r\n                            console.log(\"Piso: \" + piso);\r\n                            console.log(\"Código Postal: \");\r\n    \r\n                            do{\r\n\r\n                                eleccion = window.prompt(\"Código Postal:\");\r\n\r\n                            }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                            const codigoPostal = eleccion;\r\n\r\n                            console.clear();\r\n                            console.log(\"Crear Estudiante ➕👨‍🎓\", \"titulo\");\r\n                            console.log(\"Establecer Dirección 🏠\", \"subtitulo\");\r\n                            console.log(\"Calle: \" + calle);\r\n                            console.log(\"Número: \" + numero);\r\n                            console.log(\"Piso: \" + piso);\r\n                            console.log(\"Código Postal: \" + codigoPostal);\r\n                            console.log(\"Provincia: \");\r\n    \r\n                            do{\r\n\r\n                                eleccion = window.prompt(\"Provincia:\");\r\n\r\n                            }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                            const provincia = eleccion;\r\n\r\n                            console.clear();\r\n                            console.log(\"Crear Estudiante ➕👨‍🎓\", \"titulo\");\r\n                            console.log(\"Establecer Dirección 🏠\", \"subtitulo\");\r\n                            console.log(\"Calle: \" + calle);\r\n                            console.log(\"Número: \" + numero);\r\n                            console.log(\"Piso: \" + piso);\r\n                            console.log(\"Código Postal: \" + codigoPostal);\r\n                            console.log(\"Provincia: \" + provincia);\r\n                            console.log(\"Localidad: \");\r\n    \r\n                            do{\r\n\r\n                                eleccion = window.prompt(\"Localidad:\");\r\n\r\n                            }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                            const localidad = eleccion;\r\n\r\n                            console.clear();\r\n                            console.log(\"Crear Estudiante ➕👨‍🎓\", \"titulo\");\r\n                            console.log(\"Dirección Establecida ✅\", \"subtitulo\");\r\n                            console.log(\"Calle: \" + calle);\r\n                            console.log(\"Número: \" + numero);\r\n                            console.log(\"Piso: \" + piso);\r\n                            console.log(\"Código Postal: \" + codigoPostal);\r\n                            console.log(\"Provincia: \" + provincia);\r\n                            console.log(\"Localidad: \" + localidad);\r\n\r\n                            direccion = new Direccion(calle, numero, piso, codigoPostal, provincia, localidad);\r\n\r\n                            if(window.confirm(\"¿Desea guardar esta dirección?\")){\r\n                                \r\n                                listaDirecciones.push(direccion);\r\n\r\n                                console.clear();\r\n                                console.log(\"Crear Estudiante ➕👨‍🎓\", \"titulo\");\r\n                                console.log(\"Dirección Guardada ✅\", \"subtitulo\");\r\n                                console.log(\"Calle: \" + calle);\r\n                                console.log(\"Número: \" + numero);\r\n                                console.log(\"Piso: \" + piso);\r\n                                console.log(\"Código Postal: \" + codigoPostal);\r\n                                console.log(\"Provincia: \" + provincia);\r\n                                console.log(\"Localidad: \" + localidad);\r\n\r\n                                window.alert(\"Dirección guardada correctamente.\");\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                        console.clear();\r\n                        console.log(\"Crear Estudiante ➕👨‍🎓\", \"titulo\");\r\n                        console.log(\"Nombre: \");\r\n\r\n                        do{\r\n\r\n                            eleccion = window.prompt(\"Nombre:\");\r\n\r\n                        }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                        const nombreEstudiante = eleccion;\r\n\r\n                        console.clear();\r\n                        console.log(\"Crear Estudiante ➕👨‍🎓\", \"titulo\");\r\n                        console.log(\"Nombre: \" + nombreEstudiante);\r\n                        console.log(\"Edad: \");\r\n\r\n                        do{\r\n\r\n                            eleccion = Number.parseInt(window.prompt(\"Edad:\"));\r\n                            if(Number.isNaN(eleccion)) eleccion = -1;\r\n                            \r\n                        }while(eleccion < 0);\r\n\r\n                        const edad = eleccion;\r\n\r\n                        console.clear();\r\n                        console.log(\"Crear Estudiante ➕👨‍🎓\", \"titulo\");\r\n                        \r\n                        try{\r\n\r\n                            listaEstudiantes.añadirEstudiante(new Estudiante(nombreEstudiante, edad, direccion));\r\n\r\n                            console.log(\"Estudiante Creado ✅\", \"subtitulo\");\r\n                            console.log(\"Nombre: \" + nombreEstudiante);\r\n                            console.log(\"Edad: \" + edad);\r\n                            console.log(\"Dirección: \" + direccion.toString());\r\n\r\n                            window.alert(\"Estudiante creado correctamente.\");\r\n\r\n                        }catch(error){\r\n\r\n                            console.log(\"Estudiante No Creado ❌\", \"subtitulo\");\r\n                            console.log(\"Nombre: \" + nombreEstudiante);\r\n                            console.log(\"Edad: \" + edad);\r\n                            console.log(\"Dirección: \" + direccion.toString());\r\n\r\n                            window.alert(error);\r\n\r\n                        }\r\n\r\n                        eleccion = 0;\r\n                        break;\r\n\r\n                    /**\r\n                     * 3.1.3. Crear Asignatura\r\n                     * \r\n                     * Se pedirá nombre, y se creará la asignatura sólo si el listaAsignaturas no contiene\r\n                     * una asignatura con el mismo nombre.\r\n                     */\r\n\r\n                    case 3:\r\n\r\n                        console.log(\"Crear Asignatura ➕📕\", \"titulo\");\r\n                        console.log(\"Nombre: \");\r\n\r\n                        do{\r\n\r\n                            eleccion = window.prompt(\"Nombre:\");\r\n\r\n                        }while(!eleccion || eleccion.trim() === \"\");\r\n\r\n                        const nombreAsignatura = eleccion;\r\n\r\n                        console.clear();\r\n                        console.log(\"Crear Asignatura ➕📕\", \"titulo\");\r\n\r\n                        try{\r\n\r\n                            listaAsignaturas.añadirAsignatura(new Asignatura(nombreAsignatura));\r\n\r\n                            console.log(\"Asignatura Creada ✅\", \"subtitulo\");\r\n                            console.log(\"Nombre: \" + nombreAsignatura);\r\n\r\n                            window.alert(\"Asignatura creada correctamente.\");\r\n\r\n                        }catch(error){\r\n\r\n                            console.log(\"Asignatura No Creada ❌\", \"subtitulo\");\r\n                            console.log(\"Nombre: \" + nombreAsignatura);\r\n\r\n                            window.alert(error);\r\n\r\n                        }\r\n\r\n                        eleccion = 0;\r\n                        break;\r\n\r\n                }\r\n\r\n            }while(eleccion != 0);\r\n\r\n            break;\r\n\r\n        /**\r\n         * 3.2. Eliminar\r\n         * \r\n         * No se podrá acceder a Eliminar si no existe ningún dato, ya sea dirección, estudiante o asignatura.\r\n         */\r\n\r\n        case 2:\r\n\r\n            do{\r\n\r\n                if(listaDirecciones.length == 0 && listaEstudiantes.lista.length == 0 && listaAsignaturas.lista.length == 0){\r\n                    \r\n                    window.alert(\"No existen datos registrados.\");\r\n                    break;\r\n\r\n                }\r\n\r\n                console.clear();\r\n                console.log(\"Eliminar ➖\", \"titulo\");\r\n                console.log(\"1. 🏠 Dirección\", \"boton\");\r\n                console.log(\"2. 👨‍🎓 Estudiante\", \"boton\");\r\n                console.log(\"3. 📕 Asignatura\", \"boton\");\r\n                console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                eleccion = Number.parseInt(window.prompt(\"Elección:\"));\r\n\r\n                switch(eleccion){\r\n\r\n                    /**\r\n                     * 3.2.1. Eliminar Dirección\r\n                     * \r\n                     * Si hay direcciones en el Array listaDirecciones, se escoge una de ellas para su\r\n                     * eliminación.\r\n                     */\r\n\r\n                    case 1:\r\n\r\n                        if(listaDirecciones.length == 0){\r\n\r\n                            window.alert(\"No existen direcciones registradas.\");\r\n                            break;\r\n\r\n                        }\r\n\r\n                        console.clear();\r\n                        console.log(\"Eliminar Dirección ➖🏠\", \"titulo\");\r\n                        \r\n                        for(const direccion of listaDirecciones){\r\n\r\n                            console.log((listaDirecciones.indexOf(direccion) + 1) + \". \" + direccion.toString(), \"boton\");\r\n\r\n                        }\r\n\r\n                        console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                        do{\r\n\r\n                            eleccion = Number.parseInt(window.prompt(\"Escoja una dirección:\"));\r\n\r\n                            if(Number.isNaN(eleccion)) eleccion = -1;\r\n\r\n                        }while(eleccion < 0 || eleccion > listaDirecciones.length);\r\n\r\n                        if(eleccion == 0){\r\n                            eleccion = -1;\r\n                            break;\r\n                        }\r\n\r\n                        listaDirecciones = listaDirecciones.filter((d, indice) => indice != eleccion - 1);\r\n\r\n                        console.clear();\r\n                        console.log(\"Eliminar Dirección ➖🏠\", \"titulo\");\r\n                        console.log(\"Dirección Eliminada ✅\", \"subtitulo\");\r\n                        \r\n                        for(const direccion of listaDirecciones){\r\n\r\n                            if(listaDirecciones.length == 0){\r\n\r\n                                console.log(\"No existen direcciones registradas.\");\r\n                                break;\r\n    \r\n                            }\r\n\r\n                            console.log((listaDirecciones.indexOf(direccion) + 1) + \". \" + direccion.toString(), \"boton\");\r\n\r\n                        }\r\n\r\n                        window.alert(\"Dirección eliminada correctamente.\");\r\n\r\n                        eleccion = 0;\r\n                        break;\r\n\r\n                    /**\r\n                     * 3.2.2. Eliminar Estudiante\r\n                     * \r\n                     * Si existen estudiantes en listaEstudiantes, se escoge un estudiante para su\r\n                     * eliminación.\r\n                     */\r\n\r\n                    case 2:\r\n\r\n                        if(listaEstudiantes.lista.length == 0){\r\n\r\n                            window.alert(\"No existen estudiantes registrados.\");\r\n                            break;\r\n\r\n                        }\r\n\r\n                        console.clear();\r\n                        console.log(\"Eliminar Estudiante ➖👨‍🎓\", \"titulo\");\r\n                        \r\n                        for(const estudiante of listaEstudiantes.lista){\r\n\r\n                            console.log((listaEstudiantes.lista.indexOf(estudiante) + 1) + \". \" + estudiante.toString(), \"boton\");\r\n\r\n                        }\r\n\r\n                        console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                        do{\r\n\r\n                            eleccion = Number.parseInt(window.prompt(\"Escoja un estudiante:\"));\r\n\r\n                            if(Number.isNaN(eleccion)) eleccion = -1;\r\n\r\n                        }while(eleccion < 0 || eleccion > listaEstudiantes.lista.length);\r\n\r\n                        if(eleccion == 0){\r\n                            eleccion = -1;\r\n                            break;\r\n                        }\r\n\r\n                        try{\r\n\r\n                            listaEstudiantes.eliminarEstudiante(listaEstudiantes.lista[eleccion - 1].id);\r\n\r\n                            console.clear();\r\n                            console.log(\"Eliminar Estudiante ➖👨‍🎓\", \"titulo\");\r\n                            console.log(\"Estudiante Eliminado ✅\", \"subtitulo\");\r\n                            \r\n                            for(const estudiante of listaEstudiantes.lista){\r\n\r\n                                if(listaEstudiantes.lista.length == 0){\r\n\r\n                                    console.log(\"No existen estudiantes registrados.\");\r\n                                    break;\r\n        \r\n                                }\r\n\r\n                                console.log((listaEstudiantes.lista.indexOf(estudiante) + 1) + \". \" + estudiante.toString(), \"boton\");\r\n    \r\n                            }\r\n\r\n                            window.alert(\"Estudiante eliminado correctamente.\");\r\n\r\n                        }catch(error){\r\n\r\n                            window.alert(error);\r\n\r\n                        }\r\n\r\n                        eleccion = 0;\r\n                        break;\r\n\r\n                    /**\r\n                     * 3.2.3. Eliminar Asignatura\r\n                     * \r\n                     * Si hay asignaturas en listaAsignaturas, se escoge una asignatura para su eliminación.\r\n                     */\r\n\r\n                    case 3:\r\n\r\n                        if(listaAsignaturas.lista.length == 0){\r\n\r\n                            window.alert(\"No existen asignaturas registradas.\");\r\n                            break;\r\n\r\n                        }\r\n\r\n                        console.clear();\r\n                        console.log(\"Eliminar Asignatura ➖📕\", \"titulo\");\r\n                        \r\n                        for(const asignatura of listaAsignaturas.lista){\r\n\r\n                            console.log((listaAsignaturas.lista.indexOf(asignatura) + 1) + \". \" + asignatura.toString(), \"boton\");\r\n\r\n                        }\r\n\r\n                        console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                        do{\r\n\r\n                            eleccion = Number.parseInt(window.prompt(\"Escoja una asignatura:\"));\r\n\r\n                            if(Number.isNaN(eleccion)) eleccion = -1;\r\n\r\n                        }while(eleccion < 0 || eleccion > listaAsignaturas.lista.length);\r\n\r\n                        if(eleccion == 0){\r\n                            eleccion = -1;\r\n                            break;\r\n                        }\r\n\r\n                        try{\r\n\r\n                            listaAsignaturas.eliminarAsignatura(listaAsignaturas.lista[eleccion - 1].toString());\r\n\r\n                            console.clear();\r\n                            console.log(\"Eliminar Asignatura ➖📕\", \"titulo\");\r\n                            console.log(\"Asignatura Eliminada ✅\", \"subtitulo\");\r\n\r\n                            for(const asignatura of listaAsignaturas.lista){\r\n\r\n                                if(listaAsignaturas.lista.length == 0){\r\n\r\n                                    console.log(\"No existen asignaturas registradas.\");\r\n                                    break;\r\n        \r\n                                }\r\n\r\n                                console.log((listaAsignaturas.lista.indexOf(asignatura) + 1) + \". \" + asignatura.toString(), \"boton\");\r\n    \r\n                            }\r\n\r\n                            window.alert(\"Asignatura eliminada correctamente.\");\r\n\r\n                        }catch(error){\r\n\r\n                            window.alert(error);\r\n\r\n                        }\r\n\r\n                        eleccion = 0;\r\n                        break;\r\n\r\n                }\r\n\r\n            }while(eleccion != 0);\r\n\r\n            break;\r\n\r\n        /**\r\n         * 3.3. Matricular\r\n         * \r\n         * Si no hay datos registrados, o no hay estudiantes, o no hay asignaturas, no se puede acceder.\r\n         * \r\n         * En primer lugar se escoge un estudiante de listaEstudiantes. Sólo se podrán escoger aquellos que\r\n         * no estén matriculados de todas las asignaturas.\r\n         * Después, se escogen las asignaturas a matricular.\r\n         */\r\n\r\n        case 3:\r\n\r\n            if(listaEstudiantes.lista.length == 0 && listaAsignaturas.lista.length == 0){\r\n                window.alert(\"No existen datos registrados.\");\r\n                break;\r\n            }\r\n\r\n            if(listaEstudiantes.lista.length == 0){\r\n                window.alert(\"No existen estudiantes registrados.\");\r\n                break;\r\n            }\r\n\r\n            if(listaAsignaturas.lista.length == 0){\r\n                window.alert(\"No existen asignaturas registradas.\");\r\n                break;\r\n            }\r\n\r\n            do{\r\n\r\n                console.clear();\r\n                console.log(\"Matricular ✍\", \"titulo\");\r\n                console.log(\"Seleccionar Estudiante 👨‍🎓\", \"subtitulo\");\r\n\r\n                for(const estudiante of listaEstudiantes.lista){\r\n\r\n                    if(estudiante.asignaturas.length != listaAsignaturas.lista.length){\r\n\r\n                        console.log((listaEstudiantes.lista.indexOf(estudiante) + 1) + \". \" + estudiante.toString(), \"boton\");\r\n\r\n                    }else{\r\n                        \r\n                        console.log((listaEstudiantes.lista.indexOf(estudiante) + 1) + \". \" + estudiante.toString(), \"boton\", \"text-decoration: line-through;\");\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                do{\r\n\r\n                    eleccion = Number.parseInt(window.prompt(\"Escoja un estudiante:\"));\r\n\r\n                    if(Number.isNaN(eleccion)) eleccion = -1;\r\n\r\n                }while(eleccion < 0 || eleccion > listaEstudiantes.lista.length);\r\n\r\n                if(eleccion == 0) break;\r\n\r\n                const estudiante = listaEstudiantes.lista[eleccion - 1];\r\n\r\n                if(estudiante.asignaturas.length == listaAsignaturas.lista.length){\r\n\r\n                    window.alert(\"El estudiante ya está cursando todas las asignaturas.\");\r\n                    eleccion = -1;\r\n                    continue;\r\n\r\n                }\r\n\r\n                let asignaturasSeleccionadas = [];\r\n                let volverMenuEstudiantes = false;\r\n\r\n                const asignaturasMatriculadas = estudiante.asignaturas.map(a => a[0].nombre);\r\n                const asignaturasDisponibles = listaAsignaturas.lista.filter(a => !asignaturasMatriculadas.includes(a.nombre));\r\n\r\n                do{\r\n\r\n                    console.clear();\r\n                    console.log(\"Matricular ✍\", \"titulo\");\r\n                    console.log(\"Estudiante: \" + estudiante.toString());\r\n                    console.log(\"Seleccionar Asignaturas 📚\", \"subtitulo\");\r\n                    \r\n                    let textoSeleccionadas = \"Seleccionadas (\" + asignaturasSeleccionadas.length + \")\";\r\n                    \r\n                    if(asignaturasSeleccionadas.length > 0) textoSeleccionadas += \": \" + asignaturasSeleccionadas.map(a => a.nombre).join(\", \");\r\n                    \r\n                    console.log(textoSeleccionadas);\r\n                    \r\n                    for(const asignatura of asignaturasDisponibles){\r\n\r\n                        const seleccionada = asignaturasSeleccionadas.includes(asignatura) ? \"❎\" : \"⬛\";\r\n                        console.log(seleccionada + \" \" + (asignaturasDisponibles.indexOf(asignatura) + 1) + \". \" + asignatura.toString(), \"boton\");\r\n\r\n                    }\r\n\r\n                    console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                    eleccion = window.prompt(\"Escoja una o más asignaturas:\\n(Pulse solamente Enter para finalizar)\");\r\n                    eleccion = Number.parseInt(eleccion);\r\n\r\n                    if(Number.isNaN(eleccion)) eleccion = -1;\r\n\r\n                    if(eleccion == 0){\r\n\r\n                        volverMenuEstudiantes = true;\r\n                        eleccion = -1;\r\n                        break;\r\n\r\n                    }else if(eleccion > 0 && eleccion <= asignaturasDisponibles.length){\r\n\r\n                        const asignatura = asignaturasDisponibles[eleccion - 1];\r\n\r\n                        if(asignaturasSeleccionadas.includes(asignatura)){\r\n\r\n                            asignaturasSeleccionadas = asignaturasSeleccionadas.filter(a => a != asignatura);\r\n\r\n                        }else{\r\n\r\n                            asignaturasSeleccionadas.push(asignatura);\r\n\r\n                        }\r\n\r\n                    }else{\r\n\r\n                        if(asignaturasSeleccionadas.length > 0 && !volverMenuEstudiantes){\r\n                    \r\n                            estudiante.matricular(...asignaturasSeleccionadas);\r\n        \r\n                            console.clear();\r\n                            console.log(\"Matricular ✍\", \"titulo\");\r\n                            console.log(\"Matrícula Terminada ✅\", \"subtitulo\");\r\n                            console.log(\"Estudiante: \" + estudiante.toString());\r\n                            console.log(\"Asignaturas (\" + asignaturasSeleccionadas.length + \"): \" + asignaturasSeleccionadas.map(a => a.toString()).join(\", \"));\r\n                            \r\n                            window.alert(\"Estudiante matriculado correctamente\");\r\n    \r\n                            eleccion = 0;\r\n                            break;\r\n        \r\n                        }else{\r\n\r\n                            window.alert(\"Debe seleccionar al menos una asignatura.\");\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }while(true);\r\n\r\n            }while(eleccion < 0 || eleccion > listaEstudiantes.lista.length);\r\n\r\n            break;\r\n\r\n        /**\r\n         * 3.4. Desmatricular\r\n         * \r\n         * Si no existen datos, asignaturas, o estudiantes matriculados de al menos una asignatura, no se\r\n         * puede acceder.\r\n         * \r\n         * En primer lugar, se escoge un estudiante de entre los matriculados en al menos una asignatura.\r\n         * Después,\r\n         * se seleccionan las asignaturas a desmatricular.\r\n         */\r\n\r\n        case 4:\r\n\r\n            if(listaEstudiantes.lista.length == 0 && listaAsignaturas.lista.length == 0){\r\n                window.alert(\"No existen datos registrados.\");\r\n                break;\r\n            }\r\n\r\n            if(listaEstudiantes.lista.length == 0){\r\n                window.alert(\"No existen estudiantes registrados.\");\r\n                break;\r\n            }\r\n\r\n            if(listaAsignaturas.lista.length == 0){\r\n                window.alert(\"No existen asignaturas registradas.\");\r\n                break;\r\n            }\r\n\r\n            if(listaEstudiantes.lista.every(e => e.asignaturas.length == 0)){\r\n                window.alert(\"No existen estudiantes matriculados.\");\r\n                break;\r\n            }\r\n\r\n            const listaMatriculados = listaEstudiantes.lista.filter(e => e.asignaturas.length > 0);\r\n\r\n            do{\r\n\r\n                console.clear();\r\n                console.log(\"Desmatricular 📤\", \"titulo\");\r\n                console.log(\"Seleccionar Estudiante 👨‍🎓\", \"subtitulo\");\r\n\r\n                for(const estudiante of listaMatriculados){\r\n\r\n                    console.log((listaMatriculados.indexOf(estudiante) + 1) + \". \" + estudiante.toString(), \"boton\");\r\n\r\n                }\r\n\r\n                console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                do{\r\n\r\n                    eleccion = Number.parseInt(window.prompt(\"Escoja un estudiante:\"));\r\n\r\n                    if(Number.isNaN(eleccion)) eleccion = -1;\r\n\r\n                }while(eleccion < 0 || eleccion > listaMatriculados.length);\r\n\r\n                if(eleccion == 0) break;\r\n\r\n                const estudiante = listaMatriculados[eleccion - 1];\r\n\r\n                let asignaturasSeleccionadas = [];\r\n                let volverMenuEstudiantes = false;\r\n                \r\n                do{\r\n\r\n                    console.clear();\r\n                    console.log(\"Desmatricular 📤\", \"titulo\");\r\n                    console.log(\"Seleccionar Asignaturas 📚\", \"subtitulo\");\r\n                    \r\n                    let textoSeleccionadas = \"Seleccionadas (\" + asignaturasSeleccionadas.length + \")\";\r\n\r\n                    if(asignaturasSeleccionadas.length > 0) textoSeleccionadas += \": \" + asignaturasSeleccionadas.map(a => a.nombre).join(\", \");\r\n                    \r\n                    console.log(textoSeleccionadas);\r\n                    \r\n                    for(const asignatura of estudiante.asignaturas){\r\n\r\n                        const seleccionada = asignaturasSeleccionadas.includes(asignatura[0]) ? \"❎\" : \"⬛\";\r\n                        console.log(seleccionada + \" \" + (estudiante.asignaturas.indexOf(asignatura) + 1) + \". \" + asignatura[0].toString(), \"boton\");\r\n\r\n                    }\r\n\r\n                    console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                    eleccion = window.prompt(\"Escoja una o más asignaturas:\\n(Pulse solamente Enter para finalizar)\");\r\n                    eleccion = Number.parseInt(eleccion);\r\n\r\n                    if(Number.isNaN(eleccion)) eleccion = -1;\r\n\r\n                    if(eleccion == 0){\r\n\r\n                        volverMenuEstudiantes = true;\r\n                        eleccion = -1;\r\n                        break;\r\n\r\n                    }else if(eleccion > 0 && eleccion <= estudiante.asignaturas.length){\r\n\r\n                        const asignatura = estudiante.asignaturas[eleccion - 1][0];\r\n\r\n                        if(asignaturasSeleccionadas.includes(asignatura)){\r\n\r\n                            asignaturasSeleccionadas = asignaturasSeleccionadas.filter(a => a != asignatura);\r\n\r\n                        }else{\r\n\r\n                            asignaturasSeleccionadas.push(asignatura);\r\n\r\n                        }\r\n\r\n                    }else{\r\n\r\n                        if(asignaturasSeleccionadas.length > 0 && !volverMenuEstudiantes){\r\n                    \r\n                            estudiante.desmatricular(...asignaturasSeleccionadas);\r\n        \r\n                            console.clear();\r\n                            console.log(\"Desmatricular 📤\", \"titulo\");\r\n                            console.log(\"Desmatrícula Terminada ✅\", \"subtitulo\");\r\n                            console.log(\"Estudiante: \" + estudiante.toString());\r\n                            console.log(\"Asignaturas (\" + asignaturasSeleccionadas.length + \"): \" + asignaturasSeleccionadas.map(a => a.toString()).join(\", \"));\r\n                            \r\n                            window.alert(\"Estudiante desmatriculado correctamente.\");\r\n\r\n                            eleccion = 0;\r\n                            break;\r\n        \r\n                        }else{\r\n\r\n                            window.alert(\"Debe seleccionar al menos una asignatura.\");\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }while(true);\r\n\r\n            }while(eleccion < 0 || eleccion > listaMatriculados.length);\r\n\r\n            break;\r\n\r\n        /**\r\n         * 3.5. Registro de Auditoría\r\n         * \r\n         * Si no existen datos, estudiantes o asignaturas, no se puede acceder.\r\n         * \r\n         * Se escoge el estudiante para obtener sus registros y se muestran.\r\n         */\r\n\r\n        case 5:\r\n\r\n            if(listaEstudiantes.lista.length == 0 && listaAsignaturas.lista.length == 0){\r\n                window.alert(\"No existen datos registrados.\");\r\n                break;\r\n            }\r\n\r\n            if(listaEstudiantes.lista.length == 0){\r\n                window.alert(\"No existen estudiantes registrados.\");\r\n                break;\r\n            }\r\n\r\n            if(listaAsignaturas.lista.length == 0){\r\n                window.alert(\"No existen asignaturas registradas.\");\r\n                break;\r\n            }\r\n\r\n            do{\r\n\r\n                console.clear();\r\n                console.log(\"Registro de Auditoría 📋\", \"titulo\");\r\n                console.log(\"Seleccionar Estudiante 👨‍🎓\", \"subtitulo\");\r\n\r\n                for(const estudiante of listaEstudiantes.lista){\r\n\r\n                    console.log((listaEstudiantes.lista.indexOf(estudiante) + 1) + \". \" + estudiante.toString(), \"boton\");\r\n\r\n                }\r\n\r\n                console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                do{\r\n\r\n                    eleccion = Number.parseInt(window.prompt(\"Escoja un estudiante:\"));\r\n\r\n                    if(Number.isNaN(eleccion)) eleccion = -1;\r\n\r\n                }while(eleccion < 0 || eleccion > listaEstudiantes.lista.length);\r\n\r\n                if(eleccion == 0) break;\r\n\r\n                const estudiante = listaEstudiantes.lista[eleccion - 1];\r\n\r\n                console.clear();\r\n                console.log(\"Registro de Auditoría 📋\", \"titulo\");\r\n                console.log(estudiante.nombre + \" 👨‍🎓\", \"subtitulo\");\r\n                \r\n                let estilo = \"border-radius: 5px;\";\r\n                estilo += \"margin: 5px;\";\r\n                estilo += \"border: 2px solid lightgray;\";\r\n                estilo += \"background-color: black;\";\r\n                estilo += \"color: white;\";\r\n\r\n                if(estudiante.registros.length == 0){\r\n                    \r\n                    console.log(\"No existen registros.\", estilo, \"font-family: 'consolas', 'sans-serif';\");\r\n\r\n                }else{\r\n\r\n                    for(const registro of estudiante.registros){\r\n\r\n                        console.log(registro, estilo, \"font-family: 'consolas', 'sans-serif';\");\r\n    \r\n                    }\r\n\r\n                }\r\n\r\n                window.alert(\"Acepte para volver.\");\r\n\r\n            }while(eleccion != 0);\r\n\r\n            break;\r\n\r\n        /**\r\n         * 3.6. Calificar\r\n         * \r\n         * Si no existen datos, asignaturas, o estudiantes matriculados de al menos una asignatura, no se \r\n         * puede acceder.\r\n         * \r\n         * En primer lugar, se escoge entre los estudiantes matriculados de al menos una asignatura.\r\n         * Después, se escoge la asignatura a calificar entre las asignaturas de las cuales el estudiante\r\n         * está matriculado. Si dicha asignatura ya está calificada, se emitirá una advertencia sobre la\r\n         * sobreescritura de la nota.\r\n         * Finalmente, se pide una nota entre 0 y 10 y se califica al estudiante con dichos parámetros.\r\n         */\r\n\r\n        case 6:\r\n\r\n            if(listaEstudiantes.lista.length == 0 && listaAsignaturas.lista.length == 0){\r\n                window.alert(\"No existen datos registrados.\");\r\n                break;\r\n            }\r\n\r\n            if(listaEstudiantes.lista.length == 0){\r\n                window.alert(\"No existen estudiantes registrados.\");\r\n                break;\r\n            }\r\n\r\n            if(listaAsignaturas.lista.length == 0){\r\n                window.alert(\"No existen asignaturas registradas.\");\r\n                break;\r\n            }\r\n\r\n            if(listaEstudiantes.lista.every(e => e.asignaturas.length == 0)){\r\n                window.alert(\"No existen estudiantes matriculados.\");\r\n                break;\r\n            }\r\n\r\n            const matriculados = listaEstudiantes.lista.filter(e => e.asignaturas.length > 0);\r\n\r\n            do{\r\n\r\n                console.clear();\r\n                console.log(\"Calificar 🔢\", \"titulo\");\r\n                console.log(\"Seleccionar Estudiante 👨‍🎓\", \"subtitulo\");\r\n\r\n                for(const estudiante of matriculados){\r\n\r\n                    console.log((matriculados.indexOf(estudiante) + 1) + \". \" + estudiante.toString(), \"boton\");\r\n\r\n                }\r\n\r\n                console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                do{\r\n\r\n                    eleccion = Number.parseInt(window.prompt(\"Escoja un estudiante:\"));\r\n\r\n                    if(Number.isNaN(eleccion)) eleccion = -1;\r\n\r\n                }while(eleccion < 0 || eleccion > matriculados.length);\r\n\r\n                if(eleccion == 0) break;\r\n\r\n                const estudiante = matriculados[eleccion - 1];\r\n\r\n                do{\r\n\r\n                    console.clear();\r\n                    console.log(\"Calificar 🔢\", \"titulo\");\r\n                    console.log(\"Estudiante: \" + estudiante.toString());\r\n                    console.log(\"Seleccionar Asignatura 📕\", \"subtitulo\");\r\n\r\n                    for(const asignatura of estudiante.asignaturas){\r\n\r\n                        let resultado = (estudiante.asignaturas.indexOf(asignatura) + 1) + \". \" + asignatura[0].toString();\r\n                        \r\n                        if(typeof asignatura[1] != \"string\") resultado += \" (\" + asignatura[1].toFixed(2) + \")\";\r\n                        console.log(resultado, \"boton\");\r\n\r\n                    }\r\n\r\n                    console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                    let valorNota;\r\n                    let sobreescritura = false;\r\n                    let asignatura;\r\n\r\n                    do{\r\n\r\n                        eleccion = Number.parseInt(window.prompt(\"Escoja una asignatura:\"));\r\n                        \r\n                        if(Number.isNaN(eleccion)){\r\n                            \r\n                            eleccion = -1;\r\n\r\n                        }else if(eleccion > 0 && eleccion <= estudiante.asignaturas.length){\r\n\r\n                            valorNota = estudiante.asignaturas[eleccion - 1][1];\r\n\r\n                            if(typeof valorNota != \"string\"){\r\n\r\n                                if(window.confirm(\"¿Seguro que quiere sobreescribir la nota anterior (\" + valorNota.toFixed(2) + \")?\")){\r\n                                \r\n                                    sobreescritura = true;\r\n                                    asignatura = estudiante.asignaturas[eleccion - 1][0];\r\n                                    \r\n                                    try{\r\n\r\n                                        asignatura.eliminarCalificacion(valorNota);\r\n\r\n                                    }catch(error){\r\n\r\n                                        window.alert(error);\r\n\r\n                                    }\r\n                                \r\n                                }else{\r\n                                 \r\n                                    eleccion = -1;\r\n                                \r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }while(eleccion < 0 || eleccion > estudiante.asignaturas.length);\r\n\r\n                    if(eleccion == 0){\r\n                        eleccion = -1;\r\n                        break;\r\n                    }\r\n\r\n                    if(!sobreescritura) asignatura = estudiante.asignaturas[eleccion - 1][0];\r\n\r\n                    console.clear();\r\n                    console.log(\"Calificar 🔢\", \"titulo\");\r\n                    console.log(\"Poner Nota ✍\", \"subtitulo\");\r\n                    console.log(\"Estudiante: \" + estudiante.toString());\r\n                    console.log(\"Asignatura: \" + asignatura.toString());\r\n                    console.log(\"Nota: \");\r\n\r\n                    do{\r\n\r\n                        eleccion = Number.parseFloat(window.prompt(\"Nota:\"));\r\n                        \r\n                        if (Number.isNaN(eleccion) || eleccion < 0 || eleccion > 10) {\r\n\r\n                            eleccion = -1;\r\n                        \r\n                        } else {\r\n                        \r\n                            eleccion = eleccion.toFixed(2);\r\n                        \r\n                        }\r\n\r\n                    }while(eleccion < 0 || eleccion > 10);\r\n\r\n                    const nota = eleccion;\r\n\r\n                    try{\r\n\r\n                        estudiante.calificar(asignatura, nota);\r\n\r\n                        console.clear();\r\n                        console.log(\"Calificar 🔢\", \"titulo\");\r\n                        console.log(\"Estudiante Calificado ✅\", \"subtitulo\");\r\n                        console.log(\"Estudiante: \" + estudiante.toString());\r\n                        console.log(\"Asignatura: \" + asignatura.toString());\r\n                        console.log(\"Nota: \" + nota);\r\n\r\n                        window.alert(\"Estudiante calificado correctamente.\");\r\n\r\n                        eleccion = 0;\r\n\r\n                    }catch(error){\r\n\r\n                        window.alert(error);\r\n\r\n                    }\r\n\r\n                }while(eleccion < 0 || eleccion > estudiante.asignaturas.length);\r\n\r\n            }while(eleccion < 0 || eleccion > listaEstudiantes.lista.length);\r\n            \r\n            break;\r\n\r\n        /**\r\n         * 3.7. Buscar\r\n         * \r\n         * Si no existen datos, estudiantes o asignaturas, no se puede acceder.\r\n         */\r\n\r\n        case 7:\r\n\r\n            if(listaEstudiantes.lista.length == 0 && listaAsignaturas.lista.length == 0){\r\n                window.alert(\"No existen datos registrados.\");\r\n                break;\r\n            }\r\n\r\n            if(listaEstudiantes.lista.length == 0){\r\n                window.alert(\"No existen estudiantes registrados.\");\r\n                break;\r\n            }\r\n\r\n            if(listaAsignaturas.lista.length == 0){\r\n                window.alert(\"No existen asignaturas registradas.\");\r\n                break;\r\n            }\r\n\r\n            do{\r\n\r\n                console.clear();\r\n                console.log(\"Buscar 🔎\", \"titulo\");\r\n                console.log(\"1. 🎓 Estudiantes\", \"boton\");\r\n                console.log(\"2. 📚 Asignaturas\", \"boton\");\r\n                console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                eleccion = Number.parseInt(window.prompt(\"Elección:\"));\r\n\r\n                console.clear();\r\n\r\n                switch(eleccion){\r\n\r\n                    /**\r\n                     * 3.7.1. Buscar Estudiantes\r\n                     * \r\n                     * Al principio, se muestran todos los estudiantes de listaEstudiantes.\r\n                     * Se introduce un texto y se muestran las coincidencias de los estudiantes cuyo nombre\r\n                     * incluya dicho texto.\r\n                     */\r\n\r\n                    case 1:\r\n\r\n                        console.log(\"Buscar Estudiantes 🔎🎓\", \"titulo\");\r\n                        console.log(\"Lista de Estudiantes\", \"subtitulo\");\r\n\r\n                        for(const estudiante of listaEstudiantes.lista){\r\n\r\n                            console.log(estudiante.toString(), \"boton\");\r\n\r\n                        }\r\n\r\n                        do{\r\n\r\n                            eleccion = window.prompt(\"Introduzca el nombre del estudiante:\");\r\n\r\n                        }while(!eleccion || eleccion.trim() == \"\" || !eleccion.match(/^[a-zA-ZáéíóúüÁÉÍÓÚÜ ]+$/));\r\n\r\n                        const resultadosEstudiantes = listaEstudiantes.busquedaEstudiantes(eleccion);\r\n\r\n                        console.clear();\r\n                        console.log(\"Buscar Estudiantes 🔎🎓\", \"titulo\");\r\n                        console.log(\"Resultados (\" + resultadosEstudiantes.length + \"): \\\"\" + eleccion + \"\\\"\", \"subtitulo\");\r\n\r\n                        if(resultadosEstudiantes.length == 0){\r\n\r\n                            window.alert(\"No se ha encontrado ningún resultado.\");\r\n                            break;\r\n\r\n                        }\r\n\r\n                        for(const estudiante of resultadosEstudiantes){\r\n\r\n                            console.log(estudiante.toString(), \"boton\");\r\n\r\n                        }\r\n\r\n                        window.alert(\"Acepte para volver.\");\r\n\r\n                        eleccion = 0;\r\n                        break;\r\n\r\n                    /**\r\n                     * 3.7.2. Buscar Asignaturas\r\n                     *\r\n                     * Al principio, se muestran todos las asignaturas de listaAsignaturas.\r\n                     * Se introduce un texto y se muestran las coincidencias de las asignaturas cuyo nombre\r\n                     * incluya dicho texto.\r\n                     */\r\n\r\n                    case 2:\r\n\r\n                        console.log(\"Buscar Asignaturas 🔎📚\", \"titulo\");\r\n                        console.log(\"Lista de Asignaturas\", \"subtitulo\");\r\n\r\n                        for(const asignatura of listaAsignaturas.lista){\r\n\r\n                            console.log(asignatura.toString(), \"boton\");\r\n\r\n                        }\r\n\r\n                        do{\r\n\r\n                            eleccion = window.prompt(\"Introduzca el nombre de la asignatura:\");\r\n\r\n                        }while(!eleccion || eleccion.trim() == \"\" || !eleccion.match(/^[a-zA-ZáéíóúüÁÉÍÓÚÜ ]+$/));\r\n\r\n                        const resultadosAsignaturas = listaAsignaturas.busquedaAsignaturas(eleccion);\r\n\r\n                        console.clear();\r\n                        console.log(\"Buscar Asignaturas 🔎📚\", \"titulo\");\r\n                        console.log(\"Resultados (\" + resultadosAsignaturas.length + \"): \\\"\" + eleccion + \"\\\"\", \"subtitulo\");\r\n\r\n                        if(resultadosAsignaturas.length == 0){\r\n\r\n                            window.alert(\"No se ha encontrado ninguna asignatura.\");\r\n                            break;\r\n\r\n                        }\r\n\r\n                        for(const estudiante of resultadosAsignaturas){\r\n\r\n                            console.log(estudiante.toString(), \"boton\");\r\n\r\n                        }\r\n\r\n                        window.alert(\"Acepte para volver.\");\r\n\r\n                        eleccion = 0;\r\n                        break;\r\n\r\n                }\r\n\r\n            }while(eleccion != 0);\r\n\r\n            break;\r\n\r\n        /**\r\n         * 3.8. Calcular Promedio\r\n         * \r\n         * Si no existen datos, estudiantes o asignaturas, no se puede acceder.\r\n         */\r\n\r\n        case 8:\r\n\r\n            if(listaEstudiantes.lista.length == 0 && listaAsignaturas.lista.length == 0){\r\n                window.alert(\"No existen datos registrados.\");\r\n                break;\r\n            }\r\n\r\n            if(listaEstudiantes.lista.length == 0){\r\n                window.alert(\"No existen estudiantes registrados.\");\r\n                break;\r\n            }\r\n\r\n            if(listaAsignaturas.lista.length == 0){\r\n                window.alert(\"No existen asignaturas registradas.\");\r\n                break;\r\n            }\r\n\r\n            do{\r\n\r\n                console.clear();\r\n                console.log(\"Calcular Promedio 💰\", \"titulo\");\r\n                console.log(\"1. 🌍 General\", \"boton\");\r\n                console.log(\"2. 📚 Asignaturas\", \"boton\");\r\n                console.log(\"0. ⏪ Volver\", \"boton\");\r\n\r\n                eleccion = Number.parseInt(window.prompt(\"Elección:\"));\r\n\r\n                console.clear();\r\n\r\n                switch(eleccion){\r\n\r\n                    /**\r\n                     * 3.8.1. Promedio General\r\n                     * \r\n                     * Muestra el promedio de los promedios de los estudiantes (promedio general) y una de los promedios\r\n                     * de cada estudiante.\r\n                     */\r\n\r\n                    case 1:\r\n\r\n                        console.log(\"Calcular Promedio 💰🌍\", \"titulo\");\r\n                        console.log(\"Promedio General: \" + listaEstudiantes.promedioGeneral, \"subtitulo\");\r\n                        \r\n                        for(const estudiante of listaEstudiantes.lista){\r\n\r\n                            console.log(estudiante.nombre + \": \" + estudiante.promedio);\r\n\r\n                        }\r\n\r\n                        window.alert(\"Acepte para volver.\");\r\n\r\n                        eleccion = 0;\r\n                        break;\r\n\r\n                    /**\r\n                     * 3.8.2. Promedio por Asignaturas\r\n                     * \r\n                     * Muestra el promedio en una asignatura de las notas de todos los estudiantes matriculados en ella.\r\n                     */\r\n\r\n                    case 2:\r\n\r\n                        console.log(\"Calcular Promedio 💰\", \"titulo\");\r\n                        console.log(\"Lista de Asignaturas 📚\", \"subtitulo\");\r\n                        \r\n                        for(const asignatura of listaAsignaturas.lista){\r\n\r\n                            console.log(asignatura.nombre + \": \" + asignatura.promedio);\r\n\r\n                        }\r\n\r\n                        window.alert(\"Acepte para volver.\");\r\n\r\n                        eleccion = 0;\r\n                        break;\r\n\r\n                }\r\n\r\n            }while(eleccion != 0);\r\n\r\n            break;\r\n\r\n        /**\r\n         * 3.9. Mostrar Reporte\r\n         * \r\n         * Muestra el reporte de todos los estudiantes y su información, tanto datos personales (nombre, edad y dirección)\r\n         * como calificaciones (asignaturas y promedio).\r\n         */\r\n\r\n        case 9:\r\n\r\n            if(listaEstudiantes.lista.length == 0){\r\n                window.alert(\"No existen estudiantes registrados.\");\r\n                break;\r\n            }\r\n\r\n            console.clear();\r\n            console.log(\"Reporte de Estudiantes (\" + listaEstudiantes.lista.length + \") 🧾\", \"titulo\");\r\n\r\n            listaEstudiantes.mostrarReporte();\r\n            \r\n            window.alert(\"Acepte para volver.\");\r\n\r\n            break;\r\n        \r\n    }\r\n\r\n}","/**\r\n * @file direccion.js\r\n * @author Alonso Hernández Robles\r\n */\r\n\r\n/**\r\n * 2.1. Clase Direccion\r\n * \r\n * La clase Direccion tiene los atributos calle, numero, piso, codigoPostal, provincia y localidad, todos son\r\n * tipo String y tienen getter. En el constructor se valida el código postal (5 números). Si no es válido, se\r\n * establecerá como \"00000\". Contiene un toString() que muestra todas las propiedades.\r\n */\r\n\r\n/**\r\n * @class\r\n * @classdesc Representa una **dirección** de un estudiante.\r\n */\r\nexport class Direccion{\r\n\r\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Calle** de la dirección. Tiene getter.\r\n     */\r\n    #calle;\r\n\r\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Número** de la dirección. Tiene getter.\r\n     */\r\n    #numero;\r\n\r\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Piso** de la dirección. Tiene getter.\r\n     */\r\n    #piso;\r\n\r\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Código postal** de la dirección. Tiene getter.\r\n     */\r\n    #codigoPostal;\r\n\r\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Provincia** de la dirección. Tiene getter.\r\n     */\r\n    #provincia;\r\n\r\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Localidad** de la dirección. Tiene getter.\r\n     */\r\n    #localidad;\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {String} calle Calle de la dirección\r\n     * @param {String} numero Número de la dirección\r\n     * @param {String} piso Piso de la dirección\r\n     * @param {String} codigoPostal Código postal de la dirección\r\n     * @param {String} provincia Provincia de la dirección\r\n     * @param {String} localidad Localidad de la dirección\r\n     * @description Crea una **dirección** con los datos proporcionados.\r\n     * - Se valida el código postal (5 números).\r\n     * - Si no es válido, se establecerá como `\"00000\"`.\r\n     * @see #calle\r\n     * @see #numero\r\n     * @see #piso\r\n     * @see #codigoPostal\r\n     * @see #provincia\r\n     * @see #localidad\r\n     */\r\n    constructor(calle, numero, piso, codigoPostal, provincia, localidad){\r\n\r\n        this.#calle = calle;\r\n        this.#numero = numero;\r\n        this.#piso = piso;\r\n        this.#codigoPostal = (new String(codigoPostal).match(/^[0-9]{5}$/)) ? codigoPostal : \"00000\";\r\n        this.#provincia = provincia;\r\n        this.#localidad = localidad;\r\n\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     * @description Getter de la calle de la dirección.\r\n     * @see #calle\r\n     */\r\n    get calle(){\r\n        return this.#calle;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     * @description Getter del número de la dirección.\r\n     * @see #numero\r\n     */\r\n    get numero(){\r\n        return this.#numero;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     * @description Getter del piso de la dirección.\r\n     * @see #piso\r\n     */\r\n    get piso(){\r\n        return this.#piso;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     * @description Getter del código postal de la dirección.\r\n     * @see #codigoPostal\r\n     */\r\n    get codigoPostal(){\r\n        return this.#codigoPostal;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     * @description Getter de la provincia de la dirección.\r\n     * @see #provincia\r\n     */\r\n    get provincia(){\r\n        return this.#provincia;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     * @description Getter de la localidad de la dirección.\r\n     * @see #localidad\r\n     */\r\n    get localidad(){\r\n        return this.#localidad;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @override\r\n     * @returns {String} Dirección completa.\r\n     * @description Devuelve la dirección completa.\r\n     * @example \"C/ Rara 12, 3ºA - 18015 Granada (Granada)\"\r\n     */\r\n    toString(){\r\n        return this.#calle + \" \" + this.#numero + \", \" + this.#piso + \" - \" + this.#codigoPostal + \" \" + this.#localidad + \" (\" + this.#provincia + \")\";\r\n    }\r\n\r\n}","/**\r\n * @file estudiante.js\r\n * @author Alonso Hernández Robles\r\n */\r\n\r\nimport { Direccion  } from \"./direccion.js\";\r\nimport { Asignatura } from \"./asignatura.js\";\r\n\r\n/**\r\n * 2.2. Clase Estudiante\r\n * \r\n * Atributos:\r\n * \r\n * - id: String identificador único del estudiante. Será \"E\" seguido del número siguiente posible que no esté\r\n *      ocupado. Los números ocupados estarán almacenados en el atributo estático numerosOcupados, y será\r\n *      calculado en el constructor. Volviendo al id, tiene getter.\r\n * \r\n * - nombre: String del nombre del estudiante. Sólo puede contener letras y espacios. De lo contrario, se\r\n *      inicializará como \"Estudiante\". Tiene getter.\r\n * \r\n * - edad: Number de edad del estudiante. Sólo puede ser positiva. De lo contrario, se inicializará como 0.\r\n *      Tiene getter.\r\n * \r\n * - direccion: Objeto Direccion con campos de la dirección del estudiante. Tiene getter.\r\n * \r\n * - asignaturas: Array (matriz) de asignaturas de las cuales el estudiante está matriculado. Cada elemento\r\n *      es un Array con dos posiciones. La primera ([0]) es la instancia en sí del objeto Asignatura.\r\n *      La segunda ([1]) es la calificación que tiene el estudiante en dicha asignatura. Su getter devuelve\r\n *      una copia del Array y no la referencia.\r\n * \r\n * - registros: Array (matriz) de registros de las matrículas y desmatrículas que se han aplicado al\r\n *      estudiante. Cada elemento es un Array con tres posiciones. La primera ([0]) es un String del nombre\r\n *      de la asignatura. La segunda ([1]) es la fecha y hora en la cual se hizo el trámite. La tercera ([2])\r\n *      es un String del tipo de trámite (\"Matrícula\" o \"Desmatrícula\"). Su getter devuelve un Array de\r\n *      Strings con la información de cada registro.\r\n * \r\n * - numerosOcupados (estático): Array de los números de las ids usadas por los estudiantes creados en ese\r\n *      momento. Se actualizará dinámicamente en la creación y eliminación de estudiantes. No tiene getter.\r\n * \r\n * Métodos:\r\n * \r\n * + constructor(nombre, edad, direccion): Calcula el número de la id, empezando por 1 hasta que encuentre un número\r\n *      no ocupado, lo añade al Array estático numerosOcupados, y establece la id como el String \"E\" concatenado de\r\n *      dicho número. Si el nombre es null o contiene caracteres que no sean letras o espacios, se establece como\r\n *      \"Estudiante\". De lo contrario, se establece como tal. Si la edad es un número negativo, se establece como 0.\r\n *      De lo contrario, se establece como tal. Se inicializan vacíos los Arrays asignaturas y registros.\r\n * \r\n * + get promedio(): Number del promedio de la nota de cada asignatura del estudiante. Devuelve el String\r\n *      \"Sin evaluar\" si ninguna nota es un número.\r\n * \r\n * + toString(): String con el id, nombre y edad del estudiante.\r\n * \r\n * + matricular(...asignaturas): Introduce en el Array asignaturas Arrays de dos posiciones, tantos\r\n *      como asignaturas haya, y en la primera posición ([0]) de cada uno de estos, cada una de las instancias\r\n *      de dichas asignaturas. Introduce un nuevo registro generado en el Array registros por cada una de las asignaturas.\r\n * \r\n * + desmatricular(...asignaturas): Elimina del Array asignaturas las asignaturas cuyo nombre coincida\r\n *      con los nombres de ...asignaturas e introduce un nuevo registro generado en el Array registros por cada\r\n *      asignatura de la cual se ha desmatriculado el estudiante.\r\n * \r\n * + calificar(asignatura, nota): Si la asignatura está presente en el Array asignaturas y la nota es un\r\n *      número entre 0 y 10 (incluidos), busca el Array que contiene la asignatura dentro del Array asignaturas\r\n *      y establece en la segunda posición ([1]) la nota. Además añade dicha calificación a la lista de\r\n *      calificaciones de la asignatura mediante el método añadirCalificacion(). De lo contrario,\r\n *      devuelve un Error correspondiente.\r\n * \r\n * + eliminarNumeroOcupado(numero) (estático): Elimina numero del Array estático numerosOcupados.\r\n */\r\n\r\n/**\r\n * @class\r\n * @classdesc Representa un **estudiante**.\r\n */\r\nexport class Estudiante{\r\n\r\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Identificador** único del estudiante. Tiene getter.\r\n     * - Será `\"E\"` seguido del número siguiente posible que no esté ocupado.\r\n     * - Los números ocupados estarán almacenados en el atributo estático `#numerosOcupados`, y será calculado en el constructor.\r\n     */\r\n    #id;\r\n\r\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Nombre** del estudiante. Tiene getter.\r\n     * - Sólo puede contener letras y espacios. De lo contrario, se inicializará como `\"Estudiante\"`.\r\n     */\r\n    #nombre;\r\n\r\n    /**\r\n     * @type {Number}\r\n     * @private\r\n     * @description **Edad** del estudiante. Tiene getter.\r\n     * - Sólo puede ser positiva. De lo contrario, se inicializará como `0`.\r\n     */\r\n    #edad;\r\n\r\n    /**\r\n     * @type {Direccion}\r\n     * @private\r\n     * @description **Dirección** del estudiante. Tiene getter.\r\n     */\r\n    #direccion;\r\n\r\n    /**\r\n     * @type {Array[]}\r\n     * @private\r\n     * @description **Asignaturas** de las cuales el estudiante está matriculado y sus correspondientes **calificaciones**.\r\n     * - Cada elemento es un Array con dos posiciones.\r\n     *      - La primera (`[0]`) es la instancia en sí del objeto `Asignatura`.\r\n     *      - La segunda (`[1]`) es la calificación que tiene el estudiante en dicha asignatura.\r\n     * - Su getter devuelve una copia del Array y no la referencia.\r\n     */\r\n    #asignaturas;\r\n\r\n    /**\r\n     * @type {String[]}\r\n     * @private\r\n     * @description **Registros** de matriculaciones y desmatriculaciones que se han aplicado al estudiante.\r\n     * - Cada elemento es un Array con tres posiciones.\r\n     *      - La primera (`[0]`) es un String del nombre de la asignatura.\r\n     *      - La segunda (`[1]`) es la fecha y hora en la cual se hizo el trámite.\r\n     *      - La tercera (`[2]`) es un String del tipo de trámite (`\"Matriculación\"` o `\"Desmatriculación\"`).\r\n     * - Su getter devuelve un Array de Strings con la información de cada registro.\r\n     */\r\n    #registros;\r\n    \r\n    /**\r\n     * @type {Number[]}\r\n     * @private\r\n     * @static\r\n     * @description **Números** de las ids usadas por los estudiantes creados en ese momento. No tiene getter.\r\n     * - Se actualizará dinámicamente en la creación y eliminación de estudiantes.\r\n     */\r\n    static #numerosOcupados = [];\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {String} nombre Nombre del estudiante\r\n     * @param {String} edad Edad del estudiante\r\n     * @param {Direccion} direccion Dirección del estudiante\r\n     * @description Crea un **estudiante** con los datos proporcionados.\r\n     * - Calcula el número de la id, empezando por `1` hasta que encuentre un número no ocupado, lo añade al Array estático `#numerosOcupados`, y establece la id como el String `\"E\"` concatenado de dicho número.\r\n     * - Si el nombre es `null` o contiene caracteres que no sean letras o espacios, se establece como `\"Estudiante\"`. De lo contrario, se establece como tal.\r\n     * - Si la edad es un número negativo, se establece como `0`. De lo contrario, se establece como tal.\r\n     * - Se inicializan vacíos los Arrays `#asignaturas` y `#registros`.\r\n     * @see #id\r\n     * @see #nombre\r\n     * @see #edad\r\n     * @see #direccion\r\n     * @see #asignaturas\r\n     * @see #registros\r\n     */\r\n    constructor(nombre, edad, direccion){\r\n\r\n        let numeroId = 1;\r\n\r\n        while (Estudiante.#numerosOcupados.includes(numeroId)) {\r\n            numeroId++;\r\n        }\r\n\r\n        Estudiante.#numerosOcupados.push(numeroId);\r\n        this.#id = \"E\" + numeroId;\r\n\r\n        this.#nombre = (nombre != null) ? ((nombre.match(/^[a-zA-ZáéíóúüÁÉÍÓÚÜ ]+$/)) ? nombre : \"Estudiante\") : \"Estudiante\";\r\n\r\n        this.#edad = (!Number.isNaN(edad) && Number.isInteger(edad) && edad > 0) ? edad : 0;\r\n\r\n        this.#direccion = direccion;\r\n        this.#asignaturas = [];\r\n        this.#registros = [];\r\n\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     * @description Getter del identificador del estudiante.\r\n     * @see #id\r\n     */\r\n    get id(){\r\n        return this.#id;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     * @description Getter del nombre del estudiante.\r\n     * @see #nombre\r\n     */\r\n    get nombre(){\r\n        return this.#nombre;\r\n    }\r\n\r\n    /**\r\n     * @type {Number}\r\n     * @description Getter de la edad del estudiante.\r\n     * @see #edad\r\n     */\r\n    get edad(){\r\n        return this.#edad;\r\n    }\r\n\r\n    /**\r\n     * @type {Direccion}\r\n     * @description Getter de la dirección del estudiante.\r\n     * @see #direccion\r\n     */\r\n    get direccion(){\r\n        return this.#direccion;\r\n    }\r\n\r\n    /**\r\n     * @type {Array[]}\r\n     * @description Getter de las asignaturas del estudiante con sus correspondientes calificaciones.\r\n     * @see #asignaturas\r\n     */\r\n    get asignaturas(){\r\n        return [...this.#asignaturas];\r\n    }\r\n\r\n    /**\r\n     * @type {String[]}\r\n     * @description Getter de los registros del estudiante.\r\n     * @see #registros\r\n     */\r\n    get registros(){\r\n\r\n        const resultado = [];\r\n        \r\n        for(const registro of this.#registros){\r\n            \r\n            const asignatura = registro[0];\r\n            const fecha = registro[1].toLocaleDateString(\"es-ES\", {weekday: \"long\", year: \"numeric\", month: \"short\", day: \"numeric\"});\r\n            const hora = registro[1].toLocaleTimeString(\"es-ES\");\r\n            const tipo = registro[2];\r\n\r\n            resultado.push(\"[\\t\" + tipo + \"\\t|\\t\" + asignatura + \"\\t|\\t\" + fecha + \" a las \" + hora + \"\\t]\");\r\n\r\n        }\r\n        \r\n        return resultado;\r\n\r\n    }\r\n\r\n    /**\r\n     * @type {String | Number}\r\n     * @description **Promedio** de las calificaciones de las asignaturas del estudiante.\r\n     * @see #asignaturas\r\n     */\r\n    get promedio(){\r\n\r\n        const asignaturasCalificadas = this.#asignaturas.filter(a => typeof a[1] != \"string\");\r\n        \r\n        if(asignaturasCalificadas.length == 0) return \"Sin evaluar\";\r\n        \r\n        const resultado = asignaturasCalificadas.reduce((suma, asignatura) => suma += asignatura[1], 0) / asignaturasCalificadas.length;\r\n        \r\n        return Number(resultado).toFixed(2);\r\n\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @override\r\n     * @returns {String} Id, nombre y edad del estudiante.\r\n     * @description Devuelve el id, nombre y edad del estudiante.\r\n     * @example \"[E1] Alonso Hernández Robles, 20\"\r\n     */\r\n    toString(){\r\n        return \"[\" + this.#id + \"] \" + this.#nombre + \", \" + this.#edad;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @param  {...Asignatura} asignaturas Asignaturas a matricular\r\n     * @description **Matricula** al estudiante de las asignaturas proporcionadas y genera un registro con dicha información.\r\n     * @see #asignaturas\r\n     * @see #registros\r\n     */\r\n    matricular(...asignaturas){\r\n\r\n        for(const asignatura of asignaturas){\r\n\r\n            if(this.#asignaturas.filter(a => a[0].nombre == asignatura.nombre).length == 0){\r\n\r\n                this.#asignaturas.push([asignatura, \"Sin evaluar\"]);\r\n                this.#registros.push([asignatura.nombre, new Date(), \"Matriculación\"]);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @param  {...Asignatura} asignaturas Asignaturas a desmatricular\r\n     * @description **Desmatricula** al estudiante de las asignaturas proporcionadas y genera un registro con dicha información.\r\n     * @see #asignaturas\r\n     * @see #registros\r\n     */\r\n    desmatricular(...asignaturas){\r\n        \r\n        for(const asignatura of asignaturas){\r\n\r\n            if(this.#asignaturas.map(a => a[0].nombre).includes(asignatura.nombre)){\r\n\r\n                this.#asignaturas = this.#asignaturas.filter(a => a[0].nombre != asignatura.nombre);\r\n                this.#registros.push([asignatura.nombre, new Date(), \"Desmatriculación\"]);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @param {Asignatura} asignatura Asignatura a calificar\r\n     * @param {Number} nota Nota a asignar\r\n     * @throws {Error} Si la asignatura no está en el Array `#asignaturas`.\r\n     * @throws {Error} Si la nota no está entre `0` y `10`.\r\n     * @description **Califica** al estudiante en la asignatura proporcionada con la nota proporcionada.\r\n     * @see #asignaturas\r\n     */\r\n    calificar(asignatura, nota){\r\n\r\n        if(!this.#asignaturas.map(a => a[0].nombre).includes(asignatura.nombre)) throw new Error(\"El estudiante no está cursando la asignatura.\");\r\n\r\n        if(nota < 0 || nota > 10) throw new Error(\"La nota debe estar entre 0 y 10.\");\r\n\r\n        for (const asig of this.#asignaturas) {\r\n\r\n            if (asig[0].nombre == asignatura.nombre) {\r\n\r\n                asig[1] = parseFloat(nota);\r\n                asignatura.añadirCalificacion(nota);\r\n                break;\r\n\r\n            }\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @param {Number} numero Número de la id a eliminar\r\n     * @static\r\n     * @description **Elimina** un número de la lista de números ocupados.\r\n     * @see #numerosOcupados\r\n     */\r\n    static eliminarNumeroOcupado(numero){\r\n        Estudiante.#numerosOcupados = Estudiante.#numerosOcupados.filter(n => n != numero);\r\n    }\r\n\r\n}","/**\r\n * @file asignatura.js\r\n * @author Alonso Hernández Robles\r\n */\r\n\r\n/**\r\n * 2.3. Clase Asignatura\r\n * \r\n * Atributos:\r\n * \r\n * - nombre: String del nombre de la asignatura. Sólo puede contener letras y espacios. De lo contrario, se\r\n *      inicializará como \"Asignatura\". Tiene getter.\r\n * \r\n * - calificaciones: Array de números de las calificaciones de todos los estudiantes en la asignatura. No tiene getter.\r\n * \r\n * Métodos:\r\n * \r\n * + constructor(nombre): Si el nombre contiene caracteres que no sean letras o espacios, se\r\n *      establece como \"Asignatura\". De lo contrario, se establece como tal. Se inicializa vacío el Array\r\n *      calificaciones.\r\n * \r\n * + get promedio(): Number del promedio de los números del Array calificaciones. Devuelve el String\r\n *      \"Sin evaluar\" si dicho array está vacío.\r\n * \r\n * + toString(): Devuelve el nombre de la asignatura (Ya que el objeto Asignatura no contiene más\r\n *      atributos sobre la información de la instancia, el método es idéntico a get nombre(), pero se declarará\r\n *      y usará con propósitos semánticos);\r\n * \r\n * + añadirCalificacion(calificacion): Añade calificacion al Array calificaciones.\r\n * \r\n * + eliminarCalificacion(calificacion): Elimina una ocurrencia cualquiera de calificacion en el Array calificaciones.\r\n */\r\n\r\n/**\r\n * @class\r\n * @classdesc Representa una **asignatura**.\r\n */\r\nexport class Asignatura{\r\n\r\n    /**\r\n     * @type {String}\r\n     * @private\r\n     * @description **Nombre** de la asignatura. Tiene getter.\r\n     * - Sólo puede contener letras y espacios. De lo contrario, se inicializará como `\"Asignatura\"`.\r\n     */\r\n    #nombre;\r\n\r\n    /**\r\n     * @type {Number[]}\r\n     * @private\r\n     * @description **Calificaciones** de los estudiantes en la asignatura. No tiene getter.\r\n     */\r\n    #calificaciones;\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {String} nombre Nombre de la asignatura\r\n     * @description Crea una **asignatura** con los datos proporcionados.\r\n     * - Si el nombre contiene caracteres que no sean letras o espacios, se establece como `\"Asignatura\"`. De lo contrario, se establece como tal.\r\n     * - Se inicializa vacío el Array `#calificaciones`.\r\n     * @see #nombre\r\n     * @see #calificaciones\r\n     */\r\n    constructor(nombre){\r\n        \r\n        this.#nombre = (nombre.match(/^[a-zA-ZáéíóúüÁÉÍÓÚÜ ]+$/)) ? nombre : \"Asignatura\";\r\n        this.#calificaciones = [];\r\n\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     * @description Getter del nombre de la asignatura.\r\n     * @see #nombre\r\n     */\r\n    get nombre(){\r\n        return this.#nombre;\r\n    }\r\n\r\n    /**\r\n     * @type {Number}\r\n     * @description **Promedio** de las calificaciones de los estudiantes en la asignatura.\r\n     * - Devuelve `\"Sin evaluar\"` si no hay calificaciones.\r\n     * @see #calificaciones\r\n     */\r\n    get promedio(){\r\n\r\n        if(this.#calificaciones.length == 0) return \"Sin evaluar\";\r\n        \r\n        const resultado = this.#calificaciones.reduce((suma, calificacion) => suma += Number.parseFloat(calificacion), 0) / this.#calificaciones.length;\r\n    \r\n        return Number(resultado).toFixed(2);\r\n\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @override\r\n     * @returns {String} Nombre de la asignatura.\r\n     * @description Devuelve el nombre de la asignatura.\r\n     * > Ya que el objeto Asignatura no contiene más atributos sobre la información de la instancia, el método es idéntico a `get nombre()`, pero se declarará y usará con propósitos semánticos.\r\n     * @example \"DWEC\"\r\n     */\r\n    toString(){\r\n        return this.#nombre;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @param {Number} calificacion Calificación a añadir\r\n     * @description **Añade** una calificación a la asignatura.\r\n     * > Saber a qué estudiante está correspondida la calificación no es relevante, para ello dicha información ya se encuentra almacenada dentro de la propiedad privada [`#asignaturas`](Estudiante.html#asignaturas) de la clase [`Estudiante`](Estudiante.html).\r\n     * @see #calificaciones\r\n     */\r\n    añadirCalificacion(calificacion){\r\n        this.#calificaciones.push(calificacion);\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @param {Number} calificacion Calificación a eliminar\r\n     * @throws {Error} Si la calificación no está en el Array #calificaciones.\r\n     * @description **Elimina** una ocurrencia cualquiera de `calificacion` en el Array `#calificaciones`.\r\n     * > Saber a qué estudiante está correspondida la calificación no es relevante, para ello dicha información ya se encuentra almacenada dentro de la propiedad privada [`#asignaturas`](Estudiante.html#asignaturas) de la clase [`Estudiante`](Estudiante.html).\r\n     * @see #calificaciones\r\n     */\r\n    eliminarCalificacion(calificacion){\r\n\r\n        const indiceCalificacion = this.#calificaciones.indexOf(calificacion);\r\n\r\n        if(indiceCalificacion == -1) throw new Error(\"Ningún estudiante ha sacado dicha calificación.\");\r\n\r\n        this.#calificaciones.splice(indiceCalificacion, 1);\r\n\r\n    }\r\n\r\n}","/**\r\n * @file listaEstudiantes.js\r\n * @author Alonso Hernández Robles\r\n */\r\n\r\nimport { Lista } from \"./lista.js\";\r\nimport { Estudiante } from \"./estudiante.js\";\r\n\r\n/**\r\n * 2.5. Clase ListaEstudiantes\r\n * \r\n * Métodos:\r\n * \r\n * + constructor(...estudiantes): Llama al constructor padre y añade los estudiantes mediante el método\r\n *      añadirEstudiante().\r\n * \r\n * + get promedioGeneral(): Number del promedio de los promedios de todos los estudiantes del Array listaRef.\r\n *      Devuelve el String \"Sin evaluar\" si ningún promedio es un número.\r\n * \r\n * + mostrarReporte(): Muestra mediante console.log(), console.groupCollapsed() y console.groupEnd() el reporte\r\n *      con la información de todos los estudiantes del Array listaRef. console.log() muestra por\r\n *      consola un mensaje. console.groupCollapsed() muestra por consola un mensaje cómo título de una\r\n *      carpeta colapsada de los mensajes que vayan a continuación. console.groupEnd() indica el final de\r\n *      dicha carpeta de mensajes.\r\n * \r\n * + añadirEstudiante(estudiante): Si no existe el estudiante dentro del Array listaRef, lo añade y ordena dicho\r\n *      Array según los números de las ids de los estudiantes. De lo contrario, devuelve un Error.\r\n * \r\n * + eliminarEstudiante(id): Elimina del Array listaRef el estudiante cuya id sea la misma que id y elimina el\r\n *      número ocupado de dicha id mediante el método estático eliminarNumeroOcupado().\r\n * \r\n * + busquedaEstudiantes(exp): Array de los objetos Estudiante cuyos nombres incluyen el String exp.\r\n */\r\n\r\n/**\r\n * @class\r\n * @classdesc Representa una **lista de estudiantes**.\r\n * @extends Lista\r\n * @see Lista\r\n */\r\nexport class ListaEstudiantes extends Lista{\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {...Estudiante} estudiantes Estudiantes a añadir\r\n     * @description Crea una **lista de estudiantes**.\r\n     * - Llama al constructor padre y añade los estudiantes mediante el método `añadirEstudiante()`.\r\n     */\r\n    constructor(...estudiantes){\r\n\r\n        super();\r\n        \r\n        for(const estudiante of estudiantes){\r\n\r\n            this.añadirEstudiante(estudiante);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @type {String | Number}\r\n     * @description **Promedio general**, de los promedios de los estudiantes.\r\n     * - Devuelve `\"Sin evaluar\"` si ningún promedio es un número.\r\n     * @see #listaRef\r\n     */\r\n    get promedioGeneral(){\r\n\r\n        const estudiantesCalificados = this.listaRef.filter(e => !isNaN(Number(e.promedio)));\r\n        \r\n        if(estudiantesCalificados.length == 0) return \"Sin evaluar\";\r\n        \r\n        const resultado = estudiantesCalificados.reduce((suma, estudiante) => suma += Number.parseFloat(estudiante.promedio), 0) / estudiantesCalificados.length;\r\n    \r\n        return Number(resultado).toFixed(2);\r\n\r\n    }\r\n    \r\n    /**\r\n     * @function\r\n     * @description **Muestra**, mediante `console.log()`, `console.groupCollapsed()` y `console.groupEnd()`, el reporte con la información de todos los estudiantes del Array `listaRef`.\r\n     * \r\n     * > `console.log()` muestra por consola un mensaje.\r\n     * >\r\n     * > `console.groupCollapsed()` muestra por consola un mensaje cómo título de una carpeta colapsada de los mensajes que vayan a continuación.\r\n     * >\r\n     * > `console.groupEnd()` indica el final de dicha carpeta de mensajes.\r\n     * @see #listaRef\r\n     */\r\n    mostrarReporte(){\r\n\r\n        for(const estudiante of this.listaRef){\r\n\r\n            console.groupCollapsed(\"[\" + estudiante.id + \"] \" + estudiante.nombre, \"boton\");\r\n\r\n                console.groupCollapsed(\"\\tDatos Personales\", \"subtitulo\");\r\n\r\n                    console.log(\"\\t\\t\\tNombre: \" + estudiante.nombre);\r\n                    console.log(\"\\t\\t\\tEdad: \" + estudiante.edad);\r\n\r\n                    console.groupCollapsed(\"\\t\\t\\tDirección\");\r\n\r\n                        console.log(\"\\t\\t\\t\\t\\tCalle: \" + estudiante.direccion.calle);\r\n                        console.log(\"\\t\\t\\t\\t\\tNúmero: \" + estudiante.direccion.numero);\r\n                        console.log(\"\\t\\t\\t\\t\\tPiso: \" + estudiante.direccion.piso);\r\n                        console.log(\"\\t\\t\\t\\t\\tCódigo Postal: \" + estudiante.direccion.codigoPostal);\r\n                        console.log(\"\\t\\t\\t\\t\\tProvincia: \" + estudiante.direccion.provincia);\r\n                        console.log(\"\\t\\t\\t\\t\\tLocalidad: \" + estudiante.direccion.localidad);\r\n\r\n                    console.groupEnd();\r\n\r\n                console.groupEnd();\r\n\r\n                console.groupCollapsed(\"\\tCalificaciones\", \"subtitulo\");\r\n\r\n                    for(const asignatura of estudiante.asignaturas){\r\n\r\n                        const notaAsignatura = (typeof asignatura[1] == \"string\") ? asignatura[1] : Number(asignatura[1]).toFixed(2);\r\n                        console.log(\"\\t\\t\\t\" + asignatura[0].nombre + \": \" + notaAsignatura);\r\n\r\n                    }\r\n\r\n                    console.log(\"\\t\\t\\tPromedio: \" + estudiante.promedio, \"font-weight: bold;\");\r\n\r\n                console.groupEnd();\r\n\r\n            console.groupEnd();\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @param {Estudiante} estudiante Estudiante a añadir\r\n     * @throws {Error} Si el estudiante ya está en el Array `listaRef`.\r\n     * @description **Añade** un estudiante a la lista.\r\n     * - Ordena el Array según los números de las ids de los estudiantes.\r\n     * @see #listaRef\r\n     */\r\n    añadirEstudiante(estudiante){\r\n\r\n        if(this.listaRef.filter(e => e.id == estudiante.id).length != 0) throw new Error(\"Ya existe el estudiante.\");\r\n\r\n        this.listaRef.push(estudiante);\r\n        this.listaRef.sort((e1, e2) => parseInt(e1.id.slice(1)) - parseInt(e2.id.slice(1)));\r\n\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @param {String} id Id del estudiante a eliminar\r\n     * @throws {Error} Si el estudiante no está en el Array `listaRef`.\r\n     * @description **Elimina** un estudiante de la lista.\r\n     * - Elimina el número ocupado de la id del estudiante.\r\n     * @see #listaRef\r\n     */\r\n    eliminarEstudiante(id){\r\n        \r\n        if(this.listaRef.filter(e => e.id != id).length == this.listaRef.length) throw new Error(\"El estudiante no se encuentra en la lista.\");\r\n        \r\n        this.listaRef = this.listaRef.filter(e => e.id != id);\r\n        Estudiante.eliminarNumeroOcupado(id.slice(1));\r\n\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @param {String} exp Expresión a buscar\r\n     * @returns {Estudiante[]} Estudiantes cuyos nombres incluyen el String `exp`.\r\n     * @description **Busca** estudiantes cuyos nombres incluyen el String `exp`.\r\n     * @see #listaRef\r\n     */\r\n    busquedaEstudiantes(exp){\r\n        return this.listaRef.filter(e => e.nombre.toLowerCase().includes(exp.toLowerCase()));\r\n    }\r\n\r\n}","/**\r\n * @file lista.js\r\n * @author Alonso Hernández Robles\r\n */\r\n\r\n/**\r\n * 2.4. Clase Lista\r\n * \r\n * Atributos:\r\n * \r\n * - listaRef: Array de objetos. Su getter devuelve la referencia original al Array. También tiene setter.\r\n *      Orientado para ser usado en la definición de las clases hijas ListaEstudiantes y ListaAsignaturas.\r\n * \r\n * Métodos:\r\n * \r\n * + constructor(): Inicializa vacío el Array #listaRef.\r\n * \r\n * + get lista(): Array de objetos. Devuelve una copia del Array #listaRef y no la referencia.\r\n *      Orientado para ser usado en la creación y uso de objetos ListaEstudiantes y/o ListaAsignaturas.\r\n */\r\n\r\n/**\r\n * @class\r\n * @classdesc Representa una **lista** de objetos.\r\n */\r\nexport class Lista{\r\n\r\n    /**\r\n     * @type {Object[]}\r\n     * @private\r\n     * @description Array de objetos.\r\n     * - Su getter devuelve la referencia original al Array. También tiene setter.\r\n     * > Orientado para ser usado en la definición de las clases hijas [`ListaEstudiantes`](ListaEstudiantes.html) y [`ListaAsignaturas`](ListaAsignaturas.html).\r\n     */\r\n    #listaRef;\r\n\r\n    /**\r\n     * @constructor\r\n     * @description Crea una **lista**.\r\n     * - Inicializa vacío el Array `#listaRef`.\r\n     * @see #listaRef\r\n     */\r\n    constructor(){\r\n        this.#listaRef = [];\r\n    }\r\n\r\n    /**\r\n     * @type {Object[]}\r\n     * @description Array de objetos.\r\n     * - Devuelve una copia del Array `#listaRef` y no la referencia.\r\n     * > Orientado para ser usado en la creación y uso de objetos [`ListaEstudiantes`](ListaEstudiantes.html) y/o [`ListaAsignaturas`](ListaAsignaturas.html).\r\n     * @see #listaRef\r\n     */\r\n    get lista(){\r\n        return [...this.#listaRef];\r\n    }\r\n\r\n    /**\r\n     * @type {Object[]}\r\n     * @description Getter del Array `#listaRef`.\r\n     * @see #listaRef\r\n     */\r\n    get listaRef(){\r\n        return this.#listaRef;\r\n    }\r\n\r\n    set listaRef(listaRef){\r\n        this.#listaRef = listaRef;\r\n    }\r\n\r\n}","/**\r\n * @file listaAsignaturas.js\r\n * @author Alonso Hernández Robles\r\n */\r\n\r\nimport { Lista } from \"./lista.js\";\r\nimport { Asignatura } from \"./asignatura.js\";\r\n\r\n/**\r\n * 2.6. Clase ListaAsignaturas\r\n * \r\n * Métodos:\r\n * \r\n * + constructor(...asignatura): Llama al constructor padre y añade las asignaturas mediante el método\r\n *      añadirAsignatura().\r\n * \r\n * + añadirAsignatura(asignatura): Si no existe la asignatura dentro del Array listaRef, la añade. De lo\r\n *      contrario, devuelve un Error.\r\n * \r\n * + eliminarAsignatura(nombre): Si existe una asignatura cuyo nombre coincide con alguno de los nombres de las\r\n *      asignaturas del Array listaRef, elimina de dicho Array dicha asignatura. De lo contrario, devuelve un Error.\r\n * \r\n * + busquedaAsignaturas(exp): Array de los objetos Asignatura cuyos nombres incluyen el String exp.\r\n */\r\n\r\n/**\r\n * @class\r\n * @classdesc Representa una **lista de asignaturas**.\r\n * @extends Lista\r\n * @see Lista\r\n */\r\nexport class ListaAsignaturas extends Lista{\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {...Asignatura} asignaturas Asignaturas a añadir\r\n     * @description Crea una **lista de asignaturas**.\r\n     * - Llama al constructor padre y añade las asignaturas mediante el método `añadirAsignatura()`.\r\n     */\r\n    constructor(...asignaturas){\r\n\r\n        super();\r\n        \r\n        for(const asignatura of asignaturas){\r\n\r\n            this.añadirAsignatura(asignatura);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @param {Asignatura} asignatura Asignatura a añadir\r\n     * @throws {Error} Si la asignatura ya está en el Array `listaRef`.\r\n     * @description **Añade** una asignatura a la lista.\r\n     * @see #listaRef\r\n     */\r\n    añadirAsignatura(asignatura){\r\n\r\n        if(this.listaRef.filter(a => a.nombre == asignatura.nombre).length != 0) throw new Error(\"Ya existe la asignatura.\");\r\n\r\n        this.listaRef.push(asignatura);\r\n\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @param {String} nombre Nombre de la asignatura a eliminar\r\n     * @throws {Error} Si la asignatura no está en el Array `listaRef`.\r\n     * @description **Elimina** una asignatura de la lista.\r\n     * @see #listaRef\r\n     */\r\n    eliminarAsignatura(nombre){\r\n\r\n        if(this.listaRef.filter(a => a.nombre == nombre).length == 0) throw new Error(\"La asignatura no se encuentra en la lista.\");\r\n\r\n        this.listaRef = this.listaRef.filter(a => a.nombre != nombre);\r\n\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @param {String} exp Expresión a buscar\r\n     * @returns {Asignatura[]} Asignaturas cuyos nombres incluyen el String `exp`.\r\n     * @description **Busca** asignaturas cuyos nombres incluyen el String `exp`.\r\n     * @see #listaRef\r\n     */\r\n    busquedaAsignaturas(exp){\r\n        return this.listaRef.filter(a => a.nombre.toLowerCase().includes(exp.toLowerCase()));\r\n    }\r\n\r\n}"],"names":["$d7137dbc75aee9e1$var$eleccion","direccion","$82d6b8e4673e1777$export$5f64543799e2ffa6","constructor","calle","numero","piso","codigoPostal","provincia","localidad","String","match","toString","$5d2658e116f5834d$export$e35364a509610a06","nombre","promedio","length","Number","reduce","suma","calificacion","parseFloat","toFixed","push","eliminarCalificacion","indiceCalificacion","indexOf","Error","splice","$e17884a1942f03bd$export$b6677c6d6502f2a3","edad","numeroId","includes","isNaN","isInteger","id","asignaturas","registros","resultado","registro","asignatura","fecha","toLocaleDateString","weekday","year","month","day","hora","toLocaleTimeString","tipo","asignaturasCalificadas","filter","a","matricular","Date","desmatricular","map","calificar","nota","asig","añadirCalificacion","eliminarNumeroOcupado","n","$52f39987efe4a5e7$export$d1790b43a08a06e3","lista","listaRef","$d7137dbc75aee9e1$var$defaultConsoleLog","console","log","texto","estilos","otrosEstilos","call","$d7137dbc75aee9e1$var$defaultConsoleGroupCollapsed","groupCollapsed","$d7137dbc75aee9e1$var$listaEstudiantes","estudiantes","estudiante","añadirEstudiante","promedioGeneral","estudiantesCalificados","e","mostrarReporte","groupEnd","notaAsignatura","sort","e1","e2","parseInt","slice","eliminarEstudiante","busquedaEstudiantes","exp","toLowerCase","$d7137dbc75aee9e1$var$listaAsignaturas","añadirAsignatura","eliminarAsignatura","busquedaAsignaturas","$d7137dbc75aee9e1$var$listaDirecciones","clear","window","prompt","trim","alert","confirm","dir","nombreEstudiante","error","nombreAsignatura","d","indice","asignaturasSeleccionadas","volverMenuEstudiantes","asignaturasMatriculadas","asignaturasDisponibles","textoSeleccionadas","join","seleccionada","every","listaMatriculados","estilo","matriculados","valorNota","sobreescritura","resultadosEstudiantes","resultadosAsignaturas"],"version":3,"file":"index.c715306c.js.map"}